/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigList,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnitionRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1CertConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1ChartConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1IgnitionForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListCoreGiantswarmIoV1alpha1StorageConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedCertConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedChartConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedIgnitionListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class CoreGiantswarmIoV1alpha1Api extends runtime.BaseAPI {

    /**
     * create an AWSClusterConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(jsonValue));
    }

    /**
     * create an AWSClusterConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create an AzureClusterConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(jsonValue));
    }

    /**
     * create an AzureClusterConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a CertConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(jsonValue));
    }

    /**
     * create a CertConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedCertConfig(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a ChartConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(jsonValue));
    }

    /**
     * create a ChartConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedChartConfig(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a DrainerConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(jsonValue));
    }

    /**
     * create a DrainerConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedDrainerConfig(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a FlannelConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(jsonValue));
    }

    /**
     * create a FlannelConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedFlannelConfig(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create an Ignition
     */
    async createCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(jsonValue));
    }

    /**
     * create an Ignition
     */
    async createCoreGiantswarmIoV1alpha1NamespacedIgnition(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a KVMClusterConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(jsonValue));
    }

    /**
     * create a KVMClusterConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a StorageConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(jsonValue));
    }

    /**
     * create a StorageConfig
     */
    async createCoreGiantswarmIoV1alpha1NamespacedStorageConfig(requestParameters: CreateCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig> {
        const response = await this.createCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AWSClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AWSClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AzureClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AzureClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of CertConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CertConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ChartConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ChartConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of DrainerConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of DrainerConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of FlannelConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of FlannelConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Ignition
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnitionRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnitionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Ignition
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnition(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnitionRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of KVMClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of KVMClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of StorageConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of StorageConfig
     */
    async deleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AWSClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AWSClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AzureClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AzureClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a CertConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a CertConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedCertConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a ChartConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ChartConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedChartConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a DrainerConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a DrainerConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a FlannelConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a FlannelConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an Ignition
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an Ignition
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedIgnition(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a KVMClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a KVMClusterConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a StorageConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a StorageConfig
     */
    async deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfig(requestParameters: DeleteCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getCoreGiantswarmIoV1alpha1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getCoreGiantswarmIoV1alpha1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getCoreGiantswarmIoV1alpha1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/awsclusterconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AzureClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/azureclusterconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AzureClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind CertConfig
     */
    async listCoreGiantswarmIoV1alpha1CertConfigForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1CertConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/certconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CertConfig
     */
    async listCoreGiantswarmIoV1alpha1CertConfigForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1CertConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1CertConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ChartConfig
     */
    async listCoreGiantswarmIoV1alpha1ChartConfigForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1ChartConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/chartconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ChartConfig
     */
    async listCoreGiantswarmIoV1alpha1ChartConfigForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1ChartConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1ChartConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind DrainerConfig
     */
    async listCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/drainerconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind DrainerConfig
     */
    async listCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind FlannelConfig
     */
    async listCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/flannelconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind FlannelConfig
     */
    async listCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Ignition
     */
    async listCoreGiantswarmIoV1alpha1IgnitionForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1IgnitionForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/ignitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Ignition
     */
    async listCoreGiantswarmIoV1alpha1IgnitionForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1IgnitionForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionList> {
        const response = await this.listCoreGiantswarmIoV1alpha1IgnitionForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind KVMClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/kvmclusterconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind KVMClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AzureClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AzureClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind CertConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CertConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedCertConfig(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ChartConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ChartConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedChartConfig(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind DrainerConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind DrainerConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedDrainerConfig(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind FlannelConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind FlannelConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedFlannelConfig(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Ignition
     */
    async listCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Ignition
     */
    async listCoreGiantswarmIoV1alpha1NamespacedIgnition(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind KVMClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind KVMClusterConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind StorageConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind StorageConfig
     */
    async listCoreGiantswarmIoV1alpha1NamespacedStorageConfig(requestParameters: ListCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind StorageConfig
     */
    async listCoreGiantswarmIoV1alpha1StorageConfigForAllNamespacesRaw(requestParameters: ListCoreGiantswarmIoV1alpha1StorageConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/storageconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind StorageConfig
     */
    async listCoreGiantswarmIoV1alpha1StorageConfigForAllNamespaces(requestParameters: ListCoreGiantswarmIoV1alpha1StorageConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigList> {
        const response = await this.listCoreGiantswarmIoV1alpha1StorageConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AWSClusterConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified AWSClusterConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AzureClusterConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified AzureClusterConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified CertConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified CertConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedCertConfig(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ChartConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified ChartConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedChartConfig(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified DrainerConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified DrainerConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified FlannelConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified FlannelConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Ignition
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(jsonValue));
    }

    /**
     * partially update the specified Ignition
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedIgnition(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified KVMClusterConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified KVMClusterConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified StorageConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified StorageConfig
     */
    async patchCoreGiantswarmIoV1alpha1NamespacedStorageConfig(requestParameters: PatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig> {
        const response = await this.patchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AWSClusterConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(jsonValue));
    }

    /**
     * read the specified AWSClusterConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AzureClusterConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(jsonValue));
    }

    /**
     * read the specified AzureClusterConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified CertConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(jsonValue));
    }

    /**
     * read the specified CertConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedCertConfig(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ChartConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(jsonValue));
    }

    /**
     * read the specified ChartConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedChartConfig(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified DrainerConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(jsonValue));
    }

    /**
     * read the specified DrainerConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedDrainerConfig(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified FlannelConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(jsonValue));
    }

    /**
     * read the specified FlannelConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedFlannelConfig(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Ignition
     */
    async readCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(jsonValue));
    }

    /**
     * read the specified Ignition
     */
    async readCoreGiantswarmIoV1alpha1NamespacedIgnition(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified KVMClusterConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(jsonValue));
    }

    /**
     * read the specified KVMClusterConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified StorageConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(jsonValue));
    }

    /**
     * read the specified StorageConfig
     */
    async readCoreGiantswarmIoV1alpha1NamespacedStorageConfig(requestParameters: ReadCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig> {
        const response = await this.readCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AWSClusterConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified AWSClusterConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfig> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AzureClusterConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified AzureClusterConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfig> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified CertConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified CertConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedCertConfig(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfig> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ChartConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified ChartConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedChartConfig(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfig> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified DrainerConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified DrainerConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfig(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfig> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified FlannelConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified FlannelConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfig(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfig> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Ignition
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(jsonValue));
    }

    /**
     * replace the specified Ignition
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedIgnition(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1Ignition> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified KVMClusterConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified KVMClusterConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfig> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified StorageConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified StorageConfig
     */
    async replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfig(requestParameters: ReplaceCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfig> {
        const response = await this.replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/awsclusterconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/azureclusterconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of CertConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/certconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of CertConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/chartconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/drainerconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/flannelconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Ignition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/ignitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Ignition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/kvmclusterconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/awsclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/awsclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azureclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azureclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind CertConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/certconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind CertConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedCertConfig(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedCertConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of CertConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedCertConfigListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedCertConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedCertConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/certconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of CertConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedCertConfigList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedCertConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedCertConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/chartconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedChartConfig(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedChartConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedChartConfigListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedChartConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedChartConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/chartconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedChartConfigList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedChartConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedChartConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/drainerconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/drainerconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/flannelconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/flannelconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Ignition. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/ignitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Ignition. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedIgnition(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedIgnitionRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Ignition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedIgnitionListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedIgnitionListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedIgnitionList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/ignitions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Ignition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedIgnitionList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedIgnitionListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedIgnitionListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/kvmclusterconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/kvmclusterconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/storageconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedStorageConfig(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigListRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/storageconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigList(requestParameters: WatchCoreGiantswarmIoV1alpha1NamespacedStorageConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespacesRaw(requestParameters: WatchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/core.giantswarm.io/v1alpha1/watch/storageconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespaces(requestParameters: WatchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

}
