/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterToJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterList,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneToJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneList,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentToJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentList,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneToJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneList,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSClusterRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlaneRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeploymentRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlaneRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class InfrastructureGiantswarmIoV1alpha2Api extends runtime.BaseAPI {

    /**
     * create an AWSCluster
     */
    async createInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters: CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(jsonValue));
    }

    /**
     * create an AWSCluster
     */
    async createInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster(requestParameters: CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster> {
        const response = await this.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     * create an AWSControlPlane
     */
    async createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters: CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(jsonValue));
    }

    /**
     * create an AWSControlPlane
     */
    async createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane(requestParameters: CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane> {
        const response = await this.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * create an AWSMachineDeployment
     */
    async createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters: CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * create an AWSMachineDeployment
     */
    async createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment(requestParameters: CreateInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment> {
        const response = await this.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a G8sControlPlane
     */
    async createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters: CreateInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(jsonValue));
    }

    /**
     * create a G8sControlPlane
     */
    async createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane(requestParameters: CreateInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane> {
        const response = await this.createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AWSCluster
     */
    async deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSClusterRaw(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSClusterRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AWSCluster
     */
    async deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSCluster(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSClusterRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AWSControlPlane
     */
    async deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlaneRaw(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlaneRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AWSControlPlane
     */
    async deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlane(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlaneRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AWSMachineDeployment
     */
    async deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeploymentRaw(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AWSMachineDeployment
     */
    async deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeployment(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of G8sControlPlane
     */
    async deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlaneRaw(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlaneRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of G8sControlPlane
     */
    async deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlane(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlaneRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AWSCluster
     */
    async deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AWSCluster
     */
    async deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AWSControlPlane
     */
    async deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AWSControlPlane
     */
    async deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AWSMachineDeployment
     */
    async deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AWSMachineDeployment
     */
    async deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a G8sControlPlane
     */
    async deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a G8sControlPlane
     */
    async deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane(requestParameters: DeleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getInfrastructureGiantswarmIoV1alpha2APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getInfrastructureGiantswarmIoV1alpha2APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getInfrastructureGiantswarmIoV1alpha2APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSCluster
     */
    async listInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespacesRaw(requestParameters: ListInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/awsclusters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSCluster
     */
    async listInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespaces(requestParameters: ListInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterList> {
        const response = await this.listInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSControlPlane
     */
    async listInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespacesRaw(requestParameters: ListInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/awscontrolplanes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSControlPlane
     */
    async listInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespaces(requestParameters: ListInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneList> {
        const response = await this.listInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSMachineDeployment
     */
    async listInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespacesRaw(requestParameters: ListInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/awsmachinedeployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSMachineDeployment
     */
    async listInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespaces(requestParameters: ListInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentList> {
        const response = await this.listInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind G8sControlPlane
     */
    async listInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespacesRaw(requestParameters: ListInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/g8scontrolplanes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind G8sControlPlane
     */
    async listInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespaces(requestParameters: ListInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneList> {
        const response = await this.listInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSCluster
     */
    async listInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters: ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSCluster
     */
    async listInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster(requestParameters: ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterList> {
        const response = await this.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSControlPlane
     */
    async listInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters: ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSControlPlane
     */
    async listInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane(requestParameters: ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneList> {
        const response = await this.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSMachineDeployment
     */
    async listInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters: ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSMachineDeployment
     */
    async listInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment(requestParameters: ListInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentList> {
        const response = await this.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind G8sControlPlane
     */
    async listInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters: ListInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind G8sControlPlane
     */
    async listInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane(requestParameters: ListInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneList> {
        const response = await this.listInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AWSCluster
     */
    async patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters: PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(jsonValue));
    }

    /**
     * partially update the specified AWSCluster
     */
    async patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster(requestParameters: PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster> {
        const response = await this.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AWSControlPlane
     */
    async patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters: PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(jsonValue));
    }

    /**
     * partially update the specified AWSControlPlane
     */
    async patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane(requestParameters: PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane> {
        const response = await this.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AWSMachineDeployment
     */
    async patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters: PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * partially update the specified AWSMachineDeployment
     */
    async patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment(requestParameters: PatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment> {
        const response = await this.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified G8sControlPlane
     */
    async patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters: PatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(jsonValue));
    }

    /**
     * partially update the specified G8sControlPlane
     */
    async patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane(requestParameters: PatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane> {
        const response = await this.patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AWSCluster
     */
    async readInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters: ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(jsonValue));
    }

    /**
     * read the specified AWSCluster
     */
    async readInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster(requestParameters: ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster> {
        const response = await this.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AWSControlPlane
     */
    async readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters: ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(jsonValue));
    }

    /**
     * read the specified AWSControlPlane
     */
    async readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane(requestParameters: ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane> {
        const response = await this.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AWSMachineDeployment
     */
    async readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters: ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * read the specified AWSMachineDeployment
     */
    async readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment(requestParameters: ReadInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment> {
        const response = await this.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified G8sControlPlane
     */
    async readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters: ReadInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(jsonValue));
    }

    /**
     * read the specified G8sControlPlane
     */
    async readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane(requestParameters: ReadInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane> {
        const response = await this.readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AWSCluster
     */
    async replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters: ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(jsonValue));
    }

    /**
     * replace the specified AWSCluster
     */
    async replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster(requestParameters: ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSCluster> {
        const response = await this.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AWSControlPlane
     */
    async replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters: ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(jsonValue));
    }

    /**
     * replace the specified AWSControlPlane
     */
    async replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane(requestParameters: ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlane> {
        const response = await this.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AWSMachineDeployment
     */
    async replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters: ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(jsonValue));
    }

    /**
     * replace the specified AWSMachineDeployment
     */
    async replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment(requestParameters: ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeployment> {
        const response = await this.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified G8sControlPlane
     */
    async replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters: ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(jsonValue));
    }

    /**
     * replace the specified G8sControlPlane
     */
    async replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane(requestParameters: ReplaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlane> {
        const response = await this.replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespacesRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/awsclusters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespaces(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespacesRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/awscontrolplanes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespaces(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespacesRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/awsmachinedeployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespaces(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespacesRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/g8scontrolplanes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespaces(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awsclusters/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterListRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awsclusters`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterList(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awscontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneListRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awscontrolplanes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneList(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awsmachinedeployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentListRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awsmachinedeployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentList(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/g8scontrolplanes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneListRaw(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/g8scontrolplanes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneList(requestParameters: WatchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneListRaw(requestParameters);
        return await response.value();
    }

}
