/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigList,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigList,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigList,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListProviderGiantswarmIoV1alpha1AWSConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListProviderGiantswarmIoV1alpha1AzureConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListProviderGiantswarmIoV1alpha1KVMConfigForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class ProviderGiantswarmIoV1alpha1Api extends runtime.BaseAPI {

    /**
     * create an AWSConfig
     */
    async createProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters: CreateProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(jsonValue));
    }

    /**
     * create an AWSConfig
     */
    async createProviderGiantswarmIoV1alpha1NamespacedAWSConfig(requestParameters: CreateProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig> {
        const response = await this.createProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create an AzureConfig
     */
    async createProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters: CreateProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(jsonValue));
    }

    /**
     * create an AzureConfig
     */
    async createProviderGiantswarmIoV1alpha1NamespacedAzureConfig(requestParameters: CreateProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig> {
        const response = await this.createProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a KVMConfig
     */
    async createProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters: CreateProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(jsonValue));
    }

    /**
     * create a KVMConfig
     */
    async createProviderGiantswarmIoV1alpha1NamespacedKVMConfig(requestParameters: CreateProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig> {
        const response = await this.createProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AWSConfig
     */
    async deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfigRaw(requestParameters: DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AWSConfig
     */
    async deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfig(requestParameters: DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AzureConfig
     */
    async deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfigRaw(requestParameters: DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AzureConfig
     */
    async deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfig(requestParameters: DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of KVMConfig
     */
    async deleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfigRaw(requestParameters: DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of KVMConfig
     */
    async deleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfig(requestParameters: DeleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AWSConfig
     */
    async deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters: DeleteProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AWSConfig
     */
    async deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfig(requestParameters: DeleteProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AzureConfig
     */
    async deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters: DeleteProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AzureConfig
     */
    async deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfig(requestParameters: DeleteProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a KVMConfig
     */
    async deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters: DeleteProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a KVMConfig
     */
    async deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfig(requestParameters: DeleteProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getProviderGiantswarmIoV1alpha1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getProviderGiantswarmIoV1alpha1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getProviderGiantswarmIoV1alpha1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSConfig
     */
    async listProviderGiantswarmIoV1alpha1AWSConfigForAllNamespacesRaw(requestParameters: ListProviderGiantswarmIoV1alpha1AWSConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/awsconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSConfig
     */
    async listProviderGiantswarmIoV1alpha1AWSConfigForAllNamespaces(requestParameters: ListProviderGiantswarmIoV1alpha1AWSConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigList> {
        const response = await this.listProviderGiantswarmIoV1alpha1AWSConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AzureConfig
     */
    async listProviderGiantswarmIoV1alpha1AzureConfigForAllNamespacesRaw(requestParameters: ListProviderGiantswarmIoV1alpha1AzureConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/azureconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AzureConfig
     */
    async listProviderGiantswarmIoV1alpha1AzureConfigForAllNamespaces(requestParameters: ListProviderGiantswarmIoV1alpha1AzureConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigList> {
        const response = await this.listProviderGiantswarmIoV1alpha1AzureConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind KVMConfig
     */
    async listProviderGiantswarmIoV1alpha1KVMConfigForAllNamespacesRaw(requestParameters: ListProviderGiantswarmIoV1alpha1KVMConfigForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/kvmconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind KVMConfig
     */
    async listProviderGiantswarmIoV1alpha1KVMConfigForAllNamespaces(requestParameters: ListProviderGiantswarmIoV1alpha1KVMConfigForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigList> {
        const response = await this.listProviderGiantswarmIoV1alpha1KVMConfigForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AWSConfig
     */
    async listProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters: ListProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AWSConfig
     */
    async listProviderGiantswarmIoV1alpha1NamespacedAWSConfig(requestParameters: ListProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigList> {
        const response = await this.listProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AzureConfig
     */
    async listProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters: ListProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AzureConfig
     */
    async listProviderGiantswarmIoV1alpha1NamespacedAzureConfig(requestParameters: ListProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigList> {
        const response = await this.listProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind KVMConfig
     */
    async listProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters: ListProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind KVMConfig
     */
    async listProviderGiantswarmIoV1alpha1NamespacedKVMConfig(requestParameters: ListProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigList> {
        const response = await this.listProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AWSConfig
     */
    async patchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters: PatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified AWSConfig
     */
    async patchProviderGiantswarmIoV1alpha1NamespacedAWSConfig(requestParameters: PatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig> {
        const response = await this.patchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AzureConfig
     */
    async patchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters: PatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified AzureConfig
     */
    async patchProviderGiantswarmIoV1alpha1NamespacedAzureConfig(requestParameters: PatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig> {
        const response = await this.patchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified KVMConfig
     */
    async patchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters: PatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(jsonValue));
    }

    /**
     * partially update the specified KVMConfig
     */
    async patchProviderGiantswarmIoV1alpha1NamespacedKVMConfig(requestParameters: PatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig> {
        const response = await this.patchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AWSConfig
     */
    async readProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters: ReadProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(jsonValue));
    }

    /**
     * read the specified AWSConfig
     */
    async readProviderGiantswarmIoV1alpha1NamespacedAWSConfig(requestParameters: ReadProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig> {
        const response = await this.readProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AzureConfig
     */
    async readProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters: ReadProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(jsonValue));
    }

    /**
     * read the specified AzureConfig
     */
    async readProviderGiantswarmIoV1alpha1NamespacedAzureConfig(requestParameters: ReadProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig> {
        const response = await this.readProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified KVMConfig
     */
    async readProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters: ReadProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(jsonValue));
    }

    /**
     * read the specified KVMConfig
     */
    async readProviderGiantswarmIoV1alpha1NamespacedKVMConfig(requestParameters: ReadProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig> {
        const response = await this.readProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AWSConfig
     */
    async replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters: ReplaceProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified AWSConfig
     */
    async replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfig(requestParameters: ReplaceProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfig> {
        const response = await this.replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AzureConfig
     */
    async replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters: ReplaceProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified AzureConfig
     */
    async replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfig(requestParameters: ReplaceProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfig> {
        const response = await this.replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified KVMConfig
     */
    async replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters: ReplaceProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(jsonValue));
    }

    /**
     * replace the specified KVMConfig
     */
    async replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfig(requestParameters: ReplaceProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfig> {
        const response = await this.replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespacesRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/awsconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespaces(requestParameters: WatchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespacesRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/azureconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespaces(requestParameters: WatchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespacesRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/kvmconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespaces(requestParameters: WatchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/awsconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedAWSConfig(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigListRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/awsconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigList(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedAWSConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azureconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedAzureConfig(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigListRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azureconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigList(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedAzureConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/kvmconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedKVMConfig(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigListRaw(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/kvmconfigs`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigList(requestParameters: WatchProviderGiantswarmIoV1alpha1NamespacedKVMConfigListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigListRaw(requestParameters);
        return await response.value();
    }

}
