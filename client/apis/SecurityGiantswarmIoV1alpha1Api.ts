/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization,
    ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationToJSON,
    ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationList,
    ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateSecurityGiantswarmIoV1alpha1OrganizationRequest {
    body: ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteSecurityGiantswarmIoV1alpha1CollectionOrganizationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteSecurityGiantswarmIoV1alpha1OrganizationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListSecurityGiantswarmIoV1alpha1OrganizationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchSecurityGiantswarmIoV1alpha1OrganizationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadSecurityGiantswarmIoV1alpha1OrganizationRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceSecurityGiantswarmIoV1alpha1OrganizationRequest {
    name: string;
    body: ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchSecurityGiantswarmIoV1alpha1OrganizationRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchSecurityGiantswarmIoV1alpha1OrganizationListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class SecurityGiantswarmIoV1alpha1Api extends runtime.BaseAPI {

    /**
     * create an Organization
     */
    async createSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters: CreateSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createSecurityGiantswarmIoV1alpha1Organization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(jsonValue));
    }

    /**
     * create an Organization
     */
    async createSecurityGiantswarmIoV1alpha1Organization(requestParameters: CreateSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization> {
        const response = await this.createSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Organization
     */
    async deleteSecurityGiantswarmIoV1alpha1CollectionOrganizationRaw(requestParameters: DeleteSecurityGiantswarmIoV1alpha1CollectionOrganizationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/organizations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Organization
     */
    async deleteSecurityGiantswarmIoV1alpha1CollectionOrganization(requestParameters: DeleteSecurityGiantswarmIoV1alpha1CollectionOrganizationRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteSecurityGiantswarmIoV1alpha1CollectionOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an Organization
     */
    async deleteSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters: DeleteSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteSecurityGiantswarmIoV1alpha1Organization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/organizations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an Organization
     */
    async deleteSecurityGiantswarmIoV1alpha1Organization(requestParameters: DeleteSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getSecurityGiantswarmIoV1alpha1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getSecurityGiantswarmIoV1alpha1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getSecurityGiantswarmIoV1alpha1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind Organization
     */
    async listSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters: ListSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Organization
     */
    async listSecurityGiantswarmIoV1alpha1Organization(requestParameters: ListSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationList> {
        const response = await this.listSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Organization
     */
    async patchSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters: PatchSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchSecurityGiantswarmIoV1alpha1Organization.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchSecurityGiantswarmIoV1alpha1Organization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/organizations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(jsonValue));
    }

    /**
     * partially update the specified Organization
     */
    async patchSecurityGiantswarmIoV1alpha1Organization(requestParameters: PatchSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization> {
        const response = await this.patchSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Organization
     */
    async readSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters: ReadSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readSecurityGiantswarmIoV1alpha1Organization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/organizations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(jsonValue));
    }

    /**
     * read the specified Organization
     */
    async readSecurityGiantswarmIoV1alpha1Organization(requestParameters: ReadSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization> {
        const response = await this.readSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Organization
     */
    async replaceSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters: ReplaceSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceSecurityGiantswarmIoV1alpha1Organization.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceSecurityGiantswarmIoV1alpha1Organization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/organizations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(jsonValue));
    }

    /**
     * replace the specified Organization
     */
    async replaceSecurityGiantswarmIoV1alpha1Organization(requestParameters: ReplaceSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1Organization> {
        const response = await this.replaceSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Organization. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters: WatchSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchSecurityGiantswarmIoV1alpha1Organization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/watch/organizations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Organization. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchSecurityGiantswarmIoV1alpha1Organization(requestParameters: WatchSecurityGiantswarmIoV1alpha1OrganizationRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Organization. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchSecurityGiantswarmIoV1alpha1OrganizationListRaw(requestParameters: WatchSecurityGiantswarmIoV1alpha1OrganizationListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apis/security.giantswarm.io/v1alpha1/watch/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Organization. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchSecurityGiantswarmIoV1alpha1OrganizationList(requestParameters: WatchSecurityGiantswarmIoV1alpha1OrganizationListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchSecurityGiantswarmIoV1alpha1OrganizationListRaw(requestParameters);
        return await response.value();
    }

}
