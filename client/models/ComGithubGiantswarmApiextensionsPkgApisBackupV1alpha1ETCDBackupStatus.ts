/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndex,
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexToJSON,
} from './';

/**
 * 
 * @export
 * @interface ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus
 */
export interface ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus {
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {Date}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus
     */
    finishedTimestamp?: Date;
    /**
     * map containing the state of the backup for all instances
     * @type {{ [key: string]: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndex; }}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus
     */
    instances?: { [key: string]: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndex; };
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {Date}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus
     */
    startedTimestamp?: Date;
    /**
     * Status of the whole backup job (can be 'Pending', 'Running'. 'Completed', 'Failed')
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus
     */
    status: string;
}

export function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSON(json: any): ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus {
    return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSONTyped(json, false);
}

export function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'finishedTimestamp': !exists(json, 'finishedTimestamp') ? undefined : (new Date(json['finishedTimestamp'])),
        'instances': !exists(json, 'instances') ? undefined : (mapValues(json['instances'], ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSON)),
        'startedTimestamp': !exists(json, 'startedTimestamp') ? undefined : (new Date(json['startedTimestamp'])),
        'status': json['status'],
    };
}

export function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusToJSON(value?: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'finishedTimestamp': value.finishedTimestamp === undefined ? undefined : (value.finishedTimestamp.toISOString()),
        'instances': value.instances === undefined ? undefined : (mapValues(value.instances, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexToJSON)),
        'startedTimestamp': value.startedTimestamp === undefined ? undefined : (value.startedTimestamp.toISOString()),
        'status': value.status,
    };
}


