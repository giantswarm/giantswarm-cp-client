/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceCondition,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionToJSON,
} from './';

/**
 * Resource is structure holding arbitrary conditions of operatorkit resource implementations. Imagine an operator implements an instance resource. This resource may operates sequentially but has to operate based on a certain system state it manages. So it tracks the status as needed here specific to its own implementation and means in order to fulfil its premise.
 * @export
 * @interface ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResource
 */
export interface ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResource {
    /**
     * 
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceCondition>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResource
     */
    conditions?: Array<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceCondition>;
    /**
     * 
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResource
     */
    name: string;
}

export function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSON(json: any): ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResource {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSONTyped(json, false);
}

export function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSON)),
        'name': json['name'],
    };
}

export function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceToJSON(value?: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionToJSON)),
        'name': value.name,
    };
}


