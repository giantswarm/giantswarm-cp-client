/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundle, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMaster, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorker } from './';
/**
 *
 * @export
 * @interface ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
 */
export interface ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest {
    /**
     *
     * @type {number}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    availabilityZones?: number;
    /**
     * DNSZone for guest cluster is supplemented with host prefixes for specific services such as Kubernetes API or Etcd. In general this DNS Zone should start with "k8s" like for example "k8s.cluster.example.com.".
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    dnsZone: string;
    /**
     *
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    id: string;
    /**
     *
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMaster>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    masters?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMaster>;
    /**
     *
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    releaseVersion?: string;
    /**
     *
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundle>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    versionBundles?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundle>;
    /**
     *
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorker>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest
     */
    workers?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorker>;
}
export declare function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestFromJSON(json: any): ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest;
export declare function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest;
export declare function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestToJSON(value?: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest | null): any;
//# sourceMappingURL=ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuest.d.ts.map