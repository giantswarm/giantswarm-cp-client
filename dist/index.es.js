/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

/* tslint:disable */
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var isBlob = function (value) { return typeof Blob !== 'undefined' && value instanceof Blob; };
/**
 * This is the base class for all generated API classes.
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration) {
        var _this = this;
        if (configuration === void 0) { configuration = new Configuration(); }
        this.configuration = configuration;
        this.fetchApi = function (url, init) { return __awaiter(_this, void 0, void 0, function () {
            var fetchParams, _i, _a, middleware, response, _b, _c, middleware;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        fetchParams = { url: url, init: init };
                        _i = 0, _a = this.middleware;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        middleware = _a[_i];
                        if (!middleware.pre) return [3 /*break*/, 3];
                        return [4 /*yield*/, middleware.pre(__assign({ fetch: this.fetchApi }, fetchParams))];
                    case 2:
                        fetchParams = (_d.sent()) || fetchParams;
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, this.configuration.fetchApi(fetchParams.url, fetchParams.init)];
                    case 5:
                        response = _d.sent();
                        _b = 0, _c = this.middleware;
                        _d.label = 6;
                    case 6:
                        if (!(_b < _c.length)) return [3 /*break*/, 9];
                        middleware = _c[_b];
                        if (!middleware.post) return [3 /*break*/, 8];
                        return [4 /*yield*/, middleware.post({
                                fetch: this.fetchApi,
                                url: url,
                                init: init,
                                response: response.clone(),
                            })];
                    case 7:
                        response = (_d.sent()) || response;
                        _d.label = 8;
                    case 8:
                        _b++;
                        return [3 /*break*/, 6];
                    case 9: return [2 /*return*/, response];
                }
            });
        }); };
        this.middleware = configuration.middleware;
    }
    BaseAPI.prototype.withMiddleware = function () {
        var _a;
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i] = arguments[_i];
        }
        var next = this.clone();
        next.middleware = (_a = next.middleware).concat.apply(_a, middlewares);
        return next;
    };
    BaseAPI.prototype.withPreMiddleware = function () {
        var preMiddlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            preMiddlewares[_i] = arguments[_i];
        }
        var middlewares = preMiddlewares.map(function (pre) { return ({ pre: pre }); });
        return this.withMiddleware.apply(this, middlewares);
    };
    BaseAPI.prototype.withPostMiddleware = function () {
        var postMiddlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            postMiddlewares[_i] = arguments[_i];
        }
        var middlewares = postMiddlewares.map(function (post) { return ({ post: post }); });
        return this.withMiddleware.apply(this, middlewares);
    };
    BaseAPI.prototype.request = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, url, init, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.createFetchParams(context), url = _a.url, init = _a.init;
                        return [4 /*yield*/, this.fetchApi(url, init)];
                    case 1:
                        response = _b.sent();
                        if (response.status >= 200 && response.status < 300) {
                            return [2 /*return*/, response];
                        }
                        throw response;
                }
            });
        });
    };
    BaseAPI.prototype.createFetchParams = function (context) {
        var url = this.configuration.basePath + context.path;
        if (context.query !== undefined && Object.keys(context.query).length !== 0) {
            // only add the querystring to the URL if there are query parameters.
            // this is done to avoid urls ending with a "?" character which buggy webservers
            // do not handle correctly sometimes.
            url += '?' + this.configuration.queryParamsStringify(context.query);
        }
        var body = ((typeof FormData !== "undefined" && context.body instanceof FormData) || context.body instanceof URLSearchParams || isBlob(context.body))
            ? context.body
            : JSON.stringify(context.body);
        var headers = Object.assign({}, this.configuration.headers, context.headers);
        var init = {
            method: context.method,
            headers: headers,
            body: body,
            credentials: this.configuration.credentials
        };
        return { url: url, init: init };
    };
    /**
     * Create a shallow clone of `this` by constructing a new instance
     * and then shallow cloning data members.
     */
    BaseAPI.prototype.clone = function () {
        var constructor = this.constructor;
        var next = new constructor(this.configuration);
        next.middleware = this.middleware.slice();
        return next;
    };
    return BaseAPI;
}());
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
var COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
var Configuration = /** @class */ (function () {
    function Configuration(configuration) {
        if (configuration === void 0) { configuration = {}; }
        this.configuration = configuration;
    }
    Object.defineProperty(Configuration.prototype, "basePath", {
        get: function () {
            return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "fetchApi", {
        get: function () {
            return this.configuration.fetchApi || window.fetch.bind(window);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "middleware", {
        get: function () {
            return this.configuration.middleware || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "queryParamsStringify", {
        get: function () {
            return this.configuration.queryParamsStringify || querystring;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "username", {
        get: function () {
            return this.configuration.username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "password", {
        get: function () {
            return this.configuration.password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "apiKey", {
        get: function () {
            var apiKey = this.configuration.apiKey;
            if (apiKey) {
                return typeof apiKey === 'function' ? apiKey : function () { return apiKey; };
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "accessToken", {
        get: function () {
            var accessToken = this.configuration.accessToken;
            if (accessToken) {
                return typeof accessToken === 'function' ? accessToken : function () { return accessToken; };
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "headers", {
        get: function () {
            return this.configuration.headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "credentials", {
        get: function () {
            return this.configuration.credentials;
        },
        enumerable: true,
        configurable: true
    });
    return Configuration;
}());
function exists(json, key) {
    var value = json[key];
    return value !== null && value !== undefined;
}
function querystring(params, prefix) {
    if (prefix === void 0) { prefix = ''; }
    return Object.keys(params)
        .map(function (key) {
        var fullKey = prefix + (prefix.length ? "[" + key + "]" : key);
        var value = params[key];
        if (value instanceof Array) {
            var multiValue = value.map(function (singleValue) { return encodeURIComponent(String(singleValue)); })
                .join("&" + encodeURIComponent(fullKey) + "=");
            return encodeURIComponent(fullKey) + "=" + multiValue;
        }
        if (value instanceof Object) {
            return querystring(value, fullKey);
        }
        return encodeURIComponent(fullKey) + "=" + encodeURIComponent(String(value));
    })
        .filter(function (part) { return part.length > 0; })
        .join('&');
}
function mapValues(data, fn) {
    return Object.keys(data).reduce(function (acc, key) {
        var _a;
        return (__assign(__assign({}, acc), (_a = {}, _a[key] = fn(data[key]), _a)));
    }, {});
}
function canConsumeForm(consumes) {
    for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
        var consume = consumes_1[_i];
        if ('multipart/form-data' === consume.contentType) {
            return true;
        }
    }
    return false;
}
var JSONApiResponse = /** @class */ (function () {
    function JSONApiResponse(raw, transformer) {
        if (transformer === void 0) { transformer = function (jsonValue) { return jsonValue; }; }
        this.raw = raw;
        this.transformer = transformer;
    }
    JSONApiResponse.prototype.value = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.transformer;
                        return [4 /*yield*/, this.raw.json()];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            });
        });
    };
    return JSONApiResponse;
}());
var VoidApiResponse = /** @class */ (function () {
    function VoidApiResponse(raw) {
        this.raw = raw;
    }
    VoidApiResponse.prototype.value = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    return VoidApiResponse;
}());
var BlobApiResponse = /** @class */ (function () {
    function BlobApiResponse(raw) {
        this.raw = raw;
    }
    BlobApiResponse.prototype.value = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.raw.blob()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return BlobApiResponse;
}());
var TextApiResponse = /** @class */ (function () {
    function TextApiResponse(raw) {
        this.raw = raw;
    }
    TextApiResponse.prototype.value = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.raw.text()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return TextApiResponse;
}());

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'config': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigFromJSON(json['config']),
        'description': json['description'],
        'logoURL': json['logoURL'],
        'storage': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageFromJSON(json['storage']),
        'title': json['title'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'config': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigToJSON(value.config),
        'description': value.description,
        'logoURL': value.logoURL,
        'storage': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageToJSON(value.storage),
        'title': value.title,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'configMap': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapFromJSON(json['configMap']),
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretFromJSON(json['secret']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'configMap': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapToJSON(value.configMap),
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretToJSON(value.secret),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'uRL': json['URL'],
        'type': json['type'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'URL': value.uRL,
        'type': value.type,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'catalog': json['catalog'],
        'config': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigFromJSON(json['config']),
        'kubeConfig': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigFromJSON(json['kubeConfig']),
        'name': json['name'],
        'namespace': json['namespace'],
        'userConfig': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigFromJSON(json['userConfig']),
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'catalog': value.catalog,
        'config': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigToJSON(value.config),
        'kubeConfig': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigToJSON(value.kubeConfig),
        'name': value.name,
        'namespace': value.namespace,
        'userConfig': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigToJSON(value.userConfig),
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'configMap': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapFromJSON(json['configMap']),
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretFromJSON(json['secret']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'configMap': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapToJSON(value.configMap),
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretToJSON(value.secret),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'context': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextFromJSON(json['context']),
        'inCluster': json['inCluster'],
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretFromJSON(json['secret']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'context': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextToJSON(value.context),
        'inCluster': value.inCluster,
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretToJSON(value.secret),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'configMap': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapFromJSON(json['configMap']),
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretFromJSON(json['secret']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'configMap': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapToJSON(value.configMap),
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretToJSON(value.secret),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'appVersion': json['appVersion'],
        'release': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseFromJSON(json['release']),
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'appVersion': value.appVersion,
        'release': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseToJSON(value.release),
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'lastDeployed': !exists(json, 'lastDeployed') ? undefined : (new Date(json['lastDeployed'])),
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'status': json['status'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'lastDeployed': value.lastDeployed === undefined ? undefined : (value.lastDeployed.toISOString()),
        'reason': value.reason,
        'status': value.status,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'config': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigFromJSON(json['config']),
        'name': json['name'],
        'namespace': json['namespace'],
        'tarballURL': json['tarballURL'],
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'config': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigToJSON(value.config),
        'name': value.name,
        'namespace': value.namespace,
        'tarballURL': value.tarballURL,
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'configMap': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapFromJSON(json['configMap']),
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretFromJSON(json['secret']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'configMap': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapToJSON(value.configMap),
        'secret': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretToJSON(value.secret),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
        'resourceVersion': json['resourceVersion'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
        'resourceVersion': value.resourceVersion,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
        'resourceVersion': json['resourceVersion'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
        'resourceVersion': value.resourceVersion,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'appVersion': json['appVersion'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'release': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseFromJSON(json['release']),
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'appVersion': value.appVersion,
        'reason': value.reason,
        'release': ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseToJSON(value.release),
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'lastDeployed': !exists(json, 'lastDeployed') ? undefined : (new Date(json['lastDeployed'])),
        'revision': json['revision'],
        'status': json['status'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'lastDeployed': value.lastDeployed === undefined ? undefined : (value.lastDeployed.toISOString()),
        'revision': value.revision,
        'status': value.status,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecFromJSON(json['spec']),
        'status': !exists(json, 'status') ? undefined : ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'guestBackup': json['guestBackup'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'guestBackup': value.guestBackup,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'finishedTimestamp': !exists(json, 'finishedTimestamp') ? undefined : (new Date(json['finishedTimestamp'])),
        'instances': !exists(json, 'instances') ? undefined : (mapValues(json['instances'], ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSON)),
        'startedTimestamp': !exists(json, 'startedTimestamp') ? undefined : (new Date(json['startedTimestamp'])),
        'status': json['status'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'finishedTimestamp': value.finishedTimestamp === undefined ? undefined : (value.finishedTimestamp.toISOString()),
        'instances': value.instances === undefined ? undefined : (mapValues(value.instances, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexToJSON)),
        'startedTimestamp': value.startedTimestamp === undefined ? undefined : (value.startedTimestamp.toISOString()),
        'status': value.status,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'backupFileSize': !exists(json, 'backupFileSize') ? undefined : json['backupFileSize'],
        'creationTime': !exists(json, 'creationTime') ? undefined : json['creationTime'],
        'encryptionTime': !exists(json, 'encryptionTime') ? undefined : json['encryptionTime'],
        'finishedTimestamp': !exists(json, 'finishedTimestamp') ? undefined : (new Date(json['finishedTimestamp'])),
        'latestError': !exists(json, 'latestError') ? undefined : json['latestError'],
        'startedTimestamp': !exists(json, 'startedTimestamp') ? undefined : (new Date(json['startedTimestamp'])),
        'status': json['status'],
        'uploadTime': !exists(json, 'uploadTime') ? undefined : json['uploadTime'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'backupFileSize': value.backupFileSize,
        'creationTime': value.creationTime,
        'encryptionTime': value.encryptionTime,
        'finishedTimestamp': value.finishedTimestamp === undefined ? undefined : (value.finishedTimestamp.toISOString()),
        'latestError': value.latestError,
        'startedTimestamp': value.startedTimestamp === undefined ? undefined : (value.startedTimestamp.toISOString()),
        'status': value.status,
        'uploadTime': value.uploadTime,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'v2': ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusFromJSON(json['v2']),
        'v3': ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusFromJSON(json['v3']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'v2': ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusToJSON(value.v2),
        'v3': ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusToJSON(value.v3),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'guest': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSON(json['guest']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'guest': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestToJSON(value.guest),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availabilityZones': !exists(json, 'availabilityZones') ? undefined : json['availabilityZones'],
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSON(json['credentialSecret']),
        'dnsZone': json['dnsZone'],
        'id': json['id'],
        'masters': !exists(json, 'masters') ? undefined : (json['masters'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'releaseVersion': !exists(json, 'releaseVersion') ? undefined : json['releaseVersion'],
        'versionBundles': !exists(json, 'versionBundles') ? undefined : (json['versionBundles'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSON)),
        'workers': !exists(json, 'workers') ? undefined : (json['workers'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availabilityZones': value.availabilityZones,
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretToJSON(value.credentialSecret),
        'dnsZone': value.dnsZone,
        'id': value.id,
        'masters': value.masters === undefined ? undefined : (value.masters.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterToJSON)),
        'name': value.name,
        'owner': value.owner,
        'releaseVersion': value.releaseVersion,
        'versionBundles': value.versionBundles === undefined ? undefined : (value.versionBundles.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleToJSON)),
        'workers': value.workers === undefined ? undefined : (value.workers.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerToJSON)),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'instanceType': !exists(json, 'instanceType') ? undefined : json['instanceType'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'instanceType': value.instanceType,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'instanceType': !exists(json, 'instanceType') ? undefined : json['instanceType'],
        'labels': json['labels'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'instanceType': value.instanceType,
        'labels': value.labels,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'guest': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestFromJSON(json['guest']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'guest': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestToJSON(value.guest),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availabilityZones': !exists(json, 'availabilityZones') ? undefined : json['availabilityZones'],
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretFromJSON(json['credentialSecret']),
        'dnsZone': json['dnsZone'],
        'id': json['id'],
        'masters': !exists(json, 'masters') ? undefined : (json['masters'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'releaseVersion': !exists(json, 'releaseVersion') ? undefined : json['releaseVersion'],
        'versionBundles': !exists(json, 'versionBundles') ? undefined : (json['versionBundles'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSON)),
        'workers': !exists(json, 'workers') ? undefined : (json['workers'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availabilityZones': value.availabilityZones,
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretToJSON(value.credentialSecret),
        'dnsZone': value.dnsZone,
        'id': value.id,
        'masters': value.masters === undefined ? undefined : (value.masters.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterToJSON)),
        'name': value.name,
        'owner': value.owner,
        'releaseVersion': value.releaseVersion,
        'versionBundles': value.versionBundles === undefined ? undefined : (value.versionBundles.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleToJSON)),
        'workers': value.workers === undefined ? undefined : (value.workers.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerToJSON)),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'vmSize': !exists(json, 'vmSize') ? undefined : json['vmSize'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'vmSize': value.vmSize,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'labels': json['labels'],
        'vmSize': !exists(json, 'vmSize') ? undefined : json['vmSize'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'labels': value.labels,
        'vmSize': value.vmSize,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cert': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertFromJSON(json['cert']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cert': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertToJSON(value.cert),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'allowBareDomains': json['allowBareDomains'],
        'altNames': !exists(json, 'altNames') ? undefined : json['altNames'],
        'clusterComponent': json['clusterComponent'],
        'clusterID': json['clusterID'],
        'commonName': json['commonName'],
        'disableRegeneration': json['disableRegeneration'],
        'ipSans': !exists(json, 'ipSans') ? undefined : json['ipSans'],
        'organizations': !exists(json, 'organizations') ? undefined : json['organizations'],
        'ttl': json['ttl'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'allowBareDomains': value.allowBareDomains,
        'altNames': value.altNames,
        'clusterComponent': value.clusterComponent,
        'clusterID': value.clusterID,
        'commonName': value.commonName,
        'disableRegeneration': value.disableRegeneration,
        'ipSans': value.ipSans,
        'organizations': value.organizations,
        'ttl': value.ttl,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'chart': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartFromJSON(json['chart']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'chart': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartToJSON(value.chart),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'channel': json['channel'],
        'configMap': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapFromJSON(json['configMap']),
        'name': json['name'],
        'namespace': json['namespace'],
        'release': json['release'],
        'secret': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretFromJSON(json['secret']),
        'userConfigMap': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapFromJSON(json['userConfigMap']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'channel': value.channel,
        'configMap': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapToJSON(value.configMap),
        'name': value.name,
        'namespace': value.namespace,
        'release': value.release,
        'secret': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretToJSON(value.secret),
        'userConfigMap': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapToJSON(value.userConfigMap),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
        'resourceVersion': json['resourceVersion'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
        'resourceVersion': value.resourceVersion,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
        'resourceVersion': json['resourceVersion'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
        'resourceVersion': value.resourceVersion,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'releaseStatus': json['releaseStatus'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reason': value.reason,
        'releaseStatus': value.releaseStatus,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'guest': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestFromJSON(json['guest']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'guest': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestToJSON(value.guest),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterFromJSON(json['cluster']),
        'node': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeFromJSON(json['node']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterToJSON(value.cluster),
        'node': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeToJSON(value.node),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIFromJSON(json['api']),
        'id': json['id'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIToJSON(value.api),
        'id': value.id,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'endpoint': json['endpoint'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'endpoint': value.endpoint,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conditions': (json['conditions'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conditions': (value.conditions.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionToJSON)),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'lastHeartbeatTime': (new Date(json['lastHeartbeatTime'])),
        'lastTransitionTime': (new Date(json['lastTransitionTime'])),
        'status': json['status'],
        'type': json['type'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'lastHeartbeatTime': (value.lastHeartbeatTime.toISOString()),
        'lastTransitionTime': (value.lastTransitionTime.toISOString()),
        'status': value.status,
        'type': value.type,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'bridge': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeFromJSON(json['bridge']),
        'cluster': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterFromJSON(json['cluster']),
        'flannel': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelFromJSON(json['flannel']),
        'health': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthFromJSON(json['health']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'bridge': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeToJSON(value.bridge),
        'cluster': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterToJSON(value.cluster),
        'flannel': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelToJSON(value.flannel),
        'health': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthToJSON(value.health),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerFromJSON(json['docker']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerToJSON(value.docker),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecToJSON(value.spec),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'image': json['image'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'image': value.image,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'dns': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSFromJSON(json['dns']),
        '_interface': json['interface'],
        'ntp': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPFromJSON(json['ntp']),
        'privateNetwork': json['privateNetwork'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'dns': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSToJSON(value.dns),
        'interface': value._interface,
        'ntp': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPToJSON(value.ntp),
        'privateNetwork': value.privateNetwork,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'servers': json['servers'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'servers': value.servers,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'servers': json['servers'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'servers': value.servers,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'customer': json['customer'],
        'id': json['id'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'customer': value.customer,
        'id': value.id,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecToJSON(value.spec),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'network': json['network'],
        'runDir': json['runDir'],
        'subnetLen': json['subnetLen'],
        'vni': json['vni'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'network': value.network,
        'runDir': value.runDir,
        'subnetLen': value.subnetLen,
        'vni': value.vni,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerFromJSON(json['docker']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerToJSON(value.docker),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'image': json['image'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'image': value.image,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiServerEncryptionKey': json['apiServerEncryptionKey'],
        'baseDomain': json['baseDomain'],
        'calico': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSON(json['calico']),
        'clusterID': json['clusterID'],
        'disableEncryptionAtRest': json['disableEncryptionAtRest'],
        'docker': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSON(json['docker']),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSON(json['etcd']),
        'extension': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSON(json['extension']),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSON(json['ingress']),
        'isMaster': json['isMaster'],
        'kubernetes': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSON(json['kubernetes']),
        'provider': json['provider'],
        'registry': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSON(json['registry']),
        'sso': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSON(json['sso']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiServerEncryptionKey': value.apiServerEncryptionKey,
        'baseDomain': value.baseDomain,
        'calico': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoToJSON(value.calico),
        'clusterID': value.clusterID,
        'disableEncryptionAtRest': value.disableEncryptionAtRest,
        'docker': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerToJSON(value.docker),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdToJSON(value.etcd),
        'extension': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionToJSON(value.extension),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressToJSON(value.ingress),
        'isMaster': value.isMaster,
        'kubernetes': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesToJSON(value.kubernetes),
        'provider': value.provider,
        'registry': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryToJSON(value.registry),
        'sso': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOToJSON(value.sso),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': json['cidr'],
        'disable': json['disable'],
        'mtu': json['mtu'],
        'subnet': json['subnet'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
        'disable': value.disable,
        'mtu': value.mtu,
        'subnet': value.subnet,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'daemon': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonFromJSON(json['daemon']),
        'networkSetup': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupFromJSON(json['networkSetup']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'daemon': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonToJSON(value.daemon),
        'networkSetup': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupToJSON(value.networkSetup),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': json['cidr'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'image': json['image'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'image': value.image,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'domain': json['domain'],
        'port': json['port'],
        'prefix': json['prefix'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'domain': value.domain,
        'port': value.port,
        'prefix': value.prefix,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'files': !exists(json, 'files') ? undefined : (json['files'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSON)),
        'units': !exists(json, 'units') ? undefined : (json['units'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSON)),
        'users': !exists(json, 'users') ? undefined : (json['users'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'files': value.files === undefined ? undefined : (value.files.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileToJSON)),
        'units': value.units === undefined ? undefined : (value.units.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitToJSON)),
        'users': value.users === undefined ? undefined : (value.users.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserToJSON)),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'content': json['content'],
        'metadata': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'content': value.content,
        'metadata': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'compression': json['compression'],
        'owner': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerFromJSON(json['owner']),
        'path': json['path'],
        'permissions': json['permissions'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'compression': value.compression,
        'owner': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerToJSON(value.owner),
        'path': value.path,
        'permissions': value.permissions,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'group': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupFromJSON(json['group']),
        'user': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserFromJSON(json['user']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'group': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupToJSON(value.group),
        'user': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserToJSON(value.user),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'name': json['name'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'name': value.name,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'name': json['name'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'name': value.name,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'content': json['content'],
        'metadata': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'content': value.content,
        'metadata': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataToJSON(value.metadata),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'enabled': json['enabled'],
        'name': json['name'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'enabled': value.enabled,
        'name': value.name,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'publicKey': json['publicKey'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'publicKey': value.publicKey,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'disable': json['disable'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'disable': value.disable,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIFromJSON(json['api']),
        'cloudProvider': json['cloudProvider'],
        'dns': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSFromJSON(json['dns']),
        'domain': json['domain'],
        'ipRange': json['ipRange'],
        'kubelet': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletFromJSON(json['kubelet']),
        'oidc': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCFromJSON(json['oidc']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIToJSON(value.api),
        'cloudProvider': value.cloudProvider,
        'dns': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSToJSON(value.dns),
        'domain': value.domain,
        'ipRange': value.ipRange,
        'kubelet': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletToJSON(value.kubelet),
        'oidc': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCToJSON(value.oidc),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'domain': json['domain'],
        'securePort': json['securePort'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'domain': value.domain,
        'securePort': value.securePort,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'ip': json['ip'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'ip': value.ip,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'domain': json['domain'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'domain': value.domain,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'clientID': json['clientID'],
        'enabled': json['enabled'],
        'groupsClaim': json['groupsClaim'],
        'groupsPrefix': json['groupsPrefix'],
        'issuerUrl': json['issuerUrl'],
        'usernameClaim': json['usernameClaim'],
        'usernamePrefix': json['usernamePrefix'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'clientID': value.clientID,
        'enabled': value.enabled,
        'groupsClaim': value.groupsClaim,
        'groupsPrefix': value.groupsPrefix,
        'issuerUrl': value.issuerUrl,
        'usernameClaim': value.usernameClaim,
        'usernamePrefix': value.usernamePrefix,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'domain': json['domain'],
        'pullProgressDeadline': json['pullProgressDeadline'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'domain': value.domain,
        'pullProgressDeadline': value.pullProgressDeadline,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'publicKey': json['publicKey'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'publicKey': value.publicKey,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'dataSecretName': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretFromJSON(json['dataSecretName']),
        'failureMessage': json['failureMessage'],
        'failureReason': json['failureReason'],
        'ready': json['ready'],
        'verification': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationFromJSON(json['verification']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'dataSecretName': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretToJSON(value.dataSecretName),
        'failureMessage': value.failureMessage,
        'failureReason': value.failureReason,
        'ready': value.ready,
        'verification': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationToJSON(value.verification),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
        'resourceVersion': json['resourceVersion'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
        'resourceVersion': value.resourceVersion,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'algorithm': json['algorithm'],
        'hash': json['hash'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'algorithm': value.algorithm,
        'hash': value.hash,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'guest': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestFromJSON(json['guest']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'guest': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestToJSON(value.guest),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availabilityZones': !exists(json, 'availabilityZones') ? undefined : json['availabilityZones'],
        'dnsZone': json['dnsZone'],
        'id': json['id'],
        'masters': !exists(json, 'masters') ? undefined : (json['masters'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'releaseVersion': !exists(json, 'releaseVersion') ? undefined : json['releaseVersion'],
        'versionBundles': !exists(json, 'versionBundles') ? undefined : (json['versionBundles'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSON)),
        'workers': !exists(json, 'workers') ? undefined : (json['workers'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availabilityZones': value.availabilityZones,
        'dnsZone': value.dnsZone,
        'id': value.id,
        'masters': value.masters === undefined ? undefined : (value.masters.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterToJSON)),
        'name': value.name,
        'owner': value.owner,
        'releaseVersion': value.releaseVersion,
        'versionBundles': value.versionBundles === undefined ? undefined : (value.versionBundles.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleToJSON)),
        'workers': value.workers === undefined ? undefined : (value.workers.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerToJSON)),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cpuCores': !exists(json, 'cpuCores') ? undefined : json['cpuCores'],
        'id': json['id'],
        'memorySizeGB': !exists(json, 'memorySizeGB') ? undefined : json['memorySizeGB'],
        'storageSizeGB': !exists(json, 'storageSizeGB') ? undefined : json['storageSizeGB'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cpuCores': value.cpuCores,
        'id': value.id,
        'memorySizeGB': value.memorySizeGB,
        'storageSizeGB': value.storageSizeGB,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cpuCores': !exists(json, 'cpuCores') ? undefined : json['cpuCores'],
        'id': json['id'],
        'labels': json['labels'],
        'memorySizeGB': !exists(json, 'memorySizeGB') ? undefined : json['memorySizeGB'],
        'storageSizeGB': !exists(json, 'storageSizeGB') ? undefined : json['storageSizeGB'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cpuCores': value.cpuCores,
        'id': value.id,
        'labels': value.labels,
        'memorySizeGB': value.memorySizeGB,
        'storageSizeGB': value.storageSizeGB,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'storage': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageFromJSON(json['storage']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'storage': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageToJSON(value.storage),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'data': json['data'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'data': value.data,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecToJSON(value.spec),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'memory': json['memory'],
        'replicas': json['replicas'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'memory': value.memory,
        'replicas': value.replicas,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': !exists(json, 'metadata') ? undefined : IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecFromJSON(json['spec']),
        'status': !exists(json, 'status') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterFromJSON(json['cluster']),
        'provider': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderFromJSON(json['provider']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterToJSON(value.cluster),
        'provider': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderToJSON(value.provider),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': json['description'],
        'dns': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSFromJSON(json['dns']),
        'kubeProxy': !exists(json, 'kubeProxy') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyFromJSON(json['kubeProxy']),
        'oidc': !exists(json, 'oidc') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCFromJSON(json['oidc']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'dns': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSToJSON(value.dns),
        'kubeProxy': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyToJSON(value.kubeProxy),
        'oidc': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCToJSON(value.oidc),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'domain': json['domain'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'domain': value.domain,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conntrackMaxPerCore': !exists(json, 'conntrackMaxPerCore') ? undefined : json['conntrackMaxPerCore'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conntrackMaxPerCore': value.conntrackMaxPerCore,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'claims': !exists(json, 'claims') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsFromJSON(json['claims']),
        'clientID': !exists(json, 'clientID') ? undefined : json['clientID'],
        'issuerURL': !exists(json, 'issuerURL') ? undefined : json['issuerURL'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'claims': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsToJSON(value.claims),
        'clientID': value.clientID,
        'issuerURL': value.issuerURL,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'groups': !exists(json, 'groups') ? undefined : json['groups'],
        'username': !exists(json, 'username') ? undefined : json['username'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'groups': value.groups,
        'username': value.username,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretFromJSON(json['credentialSecret']),
        'master': !exists(json, 'master') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterFromJSON(json['master']),
        'pods': !exists(json, 'pods') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsFromJSON(json['pods']),
        'region': json['region'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretToJSON(value.credentialSecret),
        'master': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterToJSON(value.master),
        'pods': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsToJSON(value.pods),
        'region': value.region,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availabilityZone': json['availabilityZone'],
        'instanceType': json['instanceType'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availabilityZone': value.availabilityZone,
        'instanceType': value.instanceType,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidrBlock': !exists(json, 'cidrBlock') ? undefined : json['cidrBlock'],
        'externalSNAT': !exists(json, 'externalSNAT') ? undefined : json['externalSNAT'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidrBlock': value.cidrBlock,
        'externalSNAT': value.externalSNAT,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cluster': !exists(json, 'cluster') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusFromJSON(json['cluster']),
        'provider': !exists(json, 'provider') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderFromJSON(json['provider']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusToJSON(value.cluster),
        'provider': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderToJSON(value.provider),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'network': !exists(json, 'network') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkFromJSON(json['network']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'network': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkToJSON(value.network),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': !exists(json, 'cidr') ? undefined : json['cidr'],
        'vpcID': !exists(json, 'vpcID') ? undefined : json['vpcID'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
        'vpcID': value.vpcID,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': !exists(json, 'metadata') ? undefined : IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availabilityZones': !exists(json, 'availabilityZones') ? undefined : json['availabilityZones'],
        'instanceType': !exists(json, 'instanceType') ? undefined : json['instanceType'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availabilityZones': value.availabilityZones,
        'instanceType': value.instanceType,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': !exists(json, 'metadata') ? undefined : IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecFromJSON(json['spec']),
        'status': !exists(json, 'status') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'nodePool': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolFromJSON(json['nodePool']),
        'provider': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderFromJSON(json['provider']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'nodePool': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolToJSON(value.nodePool),
        'provider': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderToJSON(value.provider),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'onDemandBaseCapacity': !exists(json, 'onDemandBaseCapacity') ? undefined : json['onDemandBaseCapacity'],
        'onDemandPercentageAboveBaseCapacity': !exists(json, 'onDemandPercentageAboveBaseCapacity') ? undefined : json['onDemandPercentageAboveBaseCapacity'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'onDemandBaseCapacity': value.onDemandBaseCapacity,
        'onDemandPercentageAboveBaseCapacity': value.onDemandPercentageAboveBaseCapacity,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': json['description'],
        'machine': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineFromJSON(json['machine']),
        'scaling': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingFromJSON(json['scaling']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'machine': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineToJSON(value.machine),
        'scaling': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingToJSON(value.scaling),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'dockerVolumeSizeGB': json['dockerVolumeSizeGB'],
        'kubeletVolumeSizeGB': json['kubeletVolumeSizeGB'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'dockerVolumeSizeGB': value.dockerVolumeSizeGB,
        'kubeletVolumeSizeGB': value.kubeletVolumeSizeGB,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'max': json['max'],
        'min': json['min'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'max': value.max,
        'min': value.min,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availabilityZones': json['availabilityZones'],
        'instanceDistribution': !exists(json, 'instanceDistribution') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionFromJSON(json['instanceDistribution']),
        'worker': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerFromJSON(json['worker']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availabilityZones': value.availabilityZones,
        'instanceDistribution': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionToJSON(value.instanceDistribution),
        'worker': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerToJSON(value.worker),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'instanceType': json['instanceType'],
        'useAlikeInstanceTypes': json['useAlikeInstanceTypes'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'instanceType': value.instanceType,
        'useAlikeInstanceTypes': value.useAlikeInstanceTypes,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'provider': !exists(json, 'provider') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderFromJSON(json['provider']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'provider': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderToJSON(value.provider),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'worker': !exists(json, 'worker') ? undefined : ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerFromJSON(json['worker']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'worker': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerToJSON(value.worker),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'instanceTypes': !exists(json, 'instanceTypes') ? undefined : json['instanceTypes'],
        'spotInstances': !exists(json, 'spotInstances') ? undefined : json['spotInstances'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'instanceTypes': value.instanceTypes,
        'spotInstances': value.spotInstances,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conditions': !exists(json, 'conditions') ? undefined : (json['conditions'].map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'versions': !exists(json, 'versions') ? undefined : (json['versions'].map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conditions': value.conditions === undefined ? undefined : (value.conditions.map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionToJSON)),
        'id': value.id,
        'versions': value.versions === undefined ? undefined : (value.versions.map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionToJSON)),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'condition': json['condition'],
        'lastTransitionTime': (new Date(json['lastTransitionTime'])),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'condition': value.condition,
        'lastTransitionTime': (value.lastTransitionTime.toISOString()),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'lastTransitionTime': (new Date(json['lastTransitionTime'])),
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'lastTransitionTime': (value.lastTransitionTime.toISOString()),
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': !exists(json, 'metadata') ? undefined : IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'infrastructureRef': IoK8sApiCoreV1ObjectReferenceFromJSON(json['infrastructureRef']),
        'replicas': !exists(json, 'replicas') ? undefined : json['replicas'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'infrastructureRef': IoK8sApiCoreV1ObjectReferenceToJSON(value.infrastructureRef),
        'replicas': value.replicas,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'readyReplicas': !exists(json, 'readyReplicas') ? undefined : json['readyReplicas'],
        'replicas': !exists(json, 'replicas') ? undefined : json['replicas'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'readyReplicas': value.readyReplicas,
        'replicas': value.replicas,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'aws': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSON(json['aws']),
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterFromJSON(json['cluster']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'aws': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSToJSON(value.aws),
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterToJSON(value.cluster),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSON(json['api']),
        'availabilityZones': json['availabilityZones'],
        'az': json['az'],
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSON(json['credentialSecret']),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSON(json['etcd']),
        'hostedZones': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSON(json['hostedZones']),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSON(json['ingress']),
        'masters': (json['masters'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSON)),
        'region': json['region'],
        'vpc': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSON(json['vpc']),
        'workers': (json['workers'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIToJSON(value.api),
        'availabilityZones': value.availabilityZones,
        'az': value.az,
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretToJSON(value.credentialSecret),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdToJSON(value.etcd),
        'hostedZones': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesToJSON(value.hostedZones),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressToJSON(value.ingress),
        'masters': (value.masters.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeToJSON)),
        'region': value.region,
        'vpc': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCToJSON(value.vpc),
        'workers': (value.workers.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeToJSON)),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'elb': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBFromJSON(json['elb']),
        'hostedZones': json['hostedZones'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'elb': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBToJSON(value.elb),
        'hostedZones': value.hostedZones,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'idleTimeoutSeconds': json['idleTimeoutSeconds'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'idleTimeoutSeconds': value.idleTimeoutSeconds,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'elb': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBFromJSON(json['elb']),
        'hostedZones': json['hostedZones'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'elb': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBToJSON(value.elb),
        'hostedZones': value.hostedZones,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'idleTimeoutSeconds': json['idleTimeoutSeconds'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'idleTimeoutSeconds': value.idleTimeoutSeconds,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneFromJSON(json['api']),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneFromJSON(json['etcd']),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneFromJSON(json['ingress']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneToJSON(value.api),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneToJSON(value.etcd),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneToJSON(value.ingress),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'elb': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBFromJSON(json['elb']),
        'hostedZones': json['hostedZones'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'elb': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBToJSON(value.elb),
        'hostedZones': value.hostedZones,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'idleTimeoutSeconds': json['idleTimeoutSeconds'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'idleTimeoutSeconds': value.idleTimeoutSeconds,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'dockerVolumeSizeGB': json['dockerVolumeSizeGB'],
        'imageID': json['imageID'],
        'instanceType': json['instanceType'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'dockerVolumeSizeGB': value.dockerVolumeSizeGB,
        'imageID': value.imageID,
        'instanceType': value.instanceType,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': json['cidr'],
        'peerId': json['peerId'],
        'privateSubnetCidr': json['privateSubnetCidr'],
        'publicSubnetCidr': json['publicSubnetCidr'],
        'routeTableNames': json['routeTableNames'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
        'peerId': value.peerId,
        'privateSubnetCidr': value.privateSubnetCidr,
        'publicSubnetCidr': value.publicSubnetCidr,
        'routeTableNames': value.routeTableNames,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'aws': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSFromJSON(json['aws']),
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterFromJSON(json['cluster']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'aws': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSToJSON(value.aws),
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterToJSON(value.cluster),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'autoScalingGroup': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupFromJSON(json['autoScalingGroup']),
        'availabilityZones': (json['availabilityZones'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'autoScalingGroup': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupToJSON(value.autoScalingGroup),
        'availabilityZones': (value.availabilityZones.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneToJSON)),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'subnet': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetFromJSON(json['subnet']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'subnet': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetToJSON(value.subnet),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        '_private': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateFromJSON(json['private']),
        '_public': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicFromJSON(json['public']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'private': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateToJSON(value._private),
        'public': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicToJSON(value._public),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': json['cidr'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': json['cidr'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'azure': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureFromJSON(json['azure']),
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterFromJSON(json['cluster']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'azure': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureToJSON(value.azure),
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterToJSON(value.cluster),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availabilityZones': json['availabilityZones'],
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSON(json['credentialSecret']),
        'dnsZones': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesFromJSON(json['dnsZones']),
        'masters': (json['masters'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeFromJSON)),
        'virtualNetwork': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkFromJSON(json['virtualNetwork']),
        'workers': (json['workers'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availabilityZones': value.availabilityZones,
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretToJSON(value.credentialSecret),
        'dnsZones': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesToJSON(value.dnsZones),
        'masters': (value.masters.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeToJSON)),
        'virtualNetwork': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkToJSON(value.virtualNetwork),
        'workers': (value.workers.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeToJSON)),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneFromJSON(json['api']),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneFromJSON(json['etcd']),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneFromJSON(json['ingress']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneToJSON(value.api),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneToJSON(value.etcd),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneToJSON(value.ingress),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'resourceGroup': json['resourceGroup'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'resourceGroup': value.resourceGroup,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'dockerVolumeSizeGB': json['dockerVolumeSizeGB'],
        'kubeletVolumeSizeGB': json['kubeletVolumeSizeGB'],
        'vmSize': json['vmSize'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'dockerVolumeSizeGB': value.dockerVolumeSizeGB,
        'kubeletVolumeSizeGB': value.kubeletVolumeSizeGB,
        'vmSize': value.vmSize,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'calicoSubnetCIDR': json['calicoSubnetCIDR'],
        'cidr': json['cidr'],
        'masterSubnetCIDR': json['masterSubnetCIDR'],
        'workerSubnetCIDR': json['workerSubnetCIDR'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'calicoSubnetCIDR': value.calicoSubnetCIDR,
        'cidr': value.cidr,
        'masterSubnetCIDR': value.masterSubnetCIDR,
        'workerSubnetCIDR': value.workerSubnetCIDR,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterFromJSON(json['cluster']),
        'provider': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderFromJSON(json['provider']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterToJSON(value.cluster),
        'provider': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderToJSON(value.provider),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availabilityZones': !exists(json, 'availabilityZones') ? undefined : json['availabilityZones'],
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressFromJSON(json['ingress']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availabilityZones': value.availabilityZones,
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressToJSON(value.ingress),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'loadBalancer': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerFromJSON(json['loadBalancer']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'loadBalancer': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerToJSON(value.loadBalancer),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'publicIPName': json['publicIPName'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'publicIPName': value.publicIPName,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'calico': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoFromJSON(json['calico']),
        'customer': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerFromJSON(json['customer']),
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerFromJSON(json['docker']),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdFromJSON(json['etcd']),
        'id': json['id'],
        'kubernetes': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesFromJSON(json['kubernetes']),
        'masters': (json['masters'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeFromJSON)),
        'scaling': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingFromJSON(json['scaling']),
        'version': json['version'],
        'workers': !exists(json, 'workers') ? undefined : (json['workers'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'calico': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoToJSON(value.calico),
        'customer': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerToJSON(value.customer),
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerToJSON(value.docker),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdToJSON(value.etcd),
        'id': value.id,
        'kubernetes': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesToJSON(value.kubernetes),
        'masters': (value.masters.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeToJSON)),
        'scaling': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingToJSON(value.scaling),
        'version': value.version,
        'workers': value.workers === undefined ? undefined : (value.workers.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeToJSON)),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': json['cidr'],
        'mtu': json['mtu'],
        'subnet': json['subnet'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
        'mtu': value.mtu,
        'subnet': value.subnet,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'daemon': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonFromJSON(json['daemon']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'daemon': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonToJSON(value.daemon),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': json['cidr'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'altNames': json['altNames'],
        'domain': json['domain'],
        'port': json['port'],
        'prefix': json['prefix'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'altNames': value.altNames,
        'domain': value.domain,
        'port': value.port,
        'prefix': value.prefix,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIFromJSON(json['api']),
        'cloudProvider': json['cloudProvider'],
        'dns': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSFromJSON(json['dns']),
        'domain': json['domain'],
        'ingressController': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerFromJSON(json['ingressController']),
        'kubelet': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletFromJSON(json['kubelet']),
        'networkSetup': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupFromJSON(json['networkSetup']),
        'ssh': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHFromJSON(json['ssh']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIToJSON(value.api),
        'cloudProvider': value.cloudProvider,
        'dns': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSToJSON(value.dns),
        'domain': value.domain,
        'ingressController': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerToJSON(value.ingressController),
        'kubelet': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletToJSON(value.kubelet),
        'networkSetup': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupToJSON(value.networkSetup),
        'ssh': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHToJSON(value.ssh),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'clusterIPRange': json['clusterIPRange'],
        'domain': json['domain'],
        'securePort': json['securePort'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'clusterIPRange': value.clusterIPRange,
        'domain': value.domain,
        'securePort': value.securePort,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'ip': json['ip'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'ip': value.ip,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerFromJSON(json['docker']),
        'domain': json['domain'],
        'insecurePort': json['insecurePort'],
        'securePort': json['securePort'],
        'wildcardDomain': json['wildcardDomain'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerToJSON(value.docker),
        'domain': value.domain,
        'insecurePort': value.insecurePort,
        'securePort': value.securePort,
        'wildcardDomain': value.wildcardDomain,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'image': json['image'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'image': value.image,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'altNames': json['altNames'],
        'domain': json['domain'],
        'labels': json['labels'],
        'port': json['port'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'altNames': value.altNames,
        'domain': value.domain,
        'labels': value.labels,
        'port': value.port,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerFromJSON(json['docker']),
        'kubeProxy': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyFromJSON(json['kubeProxy']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerToJSON(value.docker),
        'kubeProxy': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyToJSON(value.kubeProxy),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'image': json['image'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'image': value.image,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conntrackMaxPerCore': json['conntrackMaxPerCore'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conntrackMaxPerCore': value.conntrackMaxPerCore,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'userList': (json['userList'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'userList': (value.userList.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserToJSON)),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'publicKey': json['publicKey'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'publicKey': value.publicKey,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'max': json['max'],
        'min': json['min'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'max': value.max,
        'min': value.min,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'namespace': json['namespace'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'namespace': value.namespace,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterFromJSON(json['cluster']),
        'kvm': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMFromJSON(json['kvm']),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleFromJSON(json['versionBundle']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterToJSON(value.cluster),
        'kvm': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMToJSON(value.kvm),
        'versionBundle': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleToJSON(value.versionBundle),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'endpointUpdater': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterFromJSON(json['endpointUpdater']),
        'k8sKVM': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMFromJSON(json['k8sKVM']),
        'masters': (json['masters'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeFromJSON)),
        'network': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFromJSON(json['network']),
        'nodeController': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerFromJSON(json['nodeController']),
        'portMappings': (json['portMappings'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsFromJSON)),
        'workers': (json['workers'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'endpointUpdater': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterToJSON(value.endpointUpdater),
        'k8sKVM': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMToJSON(value.k8sKVM),
        'masters': (value.masters.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeToJSON)),
        'network': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkToJSON(value.network),
        'nodeController': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerToJSON(value.nodeController),
        'portMappings': (value.portMappings.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsToJSON)),
        'workers': (value.workers.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeToJSON)),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerFromJSON(json['docker']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerToJSON(value.docker),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'image': json['image'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'image': value.image,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerFromJSON(json['docker']),
        'storageType': json['storageType'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerToJSON(value.docker),
        'storageType': value.storageType,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'image': json['image'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'image': value.image,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'flannel': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelFromJSON(json['flannel']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'flannel': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelToJSON(value.flannel),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'vni': json['vni'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'vni': value.vni,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cpus': json['cpus'],
        'disk': json['disk'],
        'dockerVolumeSizeGB': json['dockerVolumeSizeGB'],
        'memory': json['memory'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cpus': value.cpus,
        'disk': value.disk,
        'dockerVolumeSizeGB': value.dockerVolumeSizeGB,
        'memory': value.memory,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerFromJSON(json['docker']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'docker': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerToJSON(value.docker),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'image': json['image'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'image': value.image,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'nodePort': json['nodePort'],
        'targetPort': json['targetPort'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'nodePort': value.nodePort,
        'targetPort': value.targetPort,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterFromJSON(json['cluster']),
        'kvm': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMFromJSON(json['kvm']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cluster': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterToJSON(value.cluster),
        'kvm': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMToJSON(value.kvm),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'nodeIndexes': json['nodeIndexes'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'nodeIndexes': value.nodeIndexes,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conditions': !exists(json, 'conditions') ? undefined : (json['conditions'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionFromJSON)),
        'network': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkFromJSON(json['network']),
        'nodes': !exists(json, 'nodes') ? undefined : (json['nodes'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeFromJSON)),
        'resources': !exists(json, 'resources') ? undefined : (json['resources'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSON)),
        'scaling': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingFromJSON(json['scaling']),
        'versions': !exists(json, 'versions') ? undefined : (json['versions'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionFromJSON)),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conditions': value.conditions === undefined ? undefined : (value.conditions.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionToJSON)),
        'network': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkToJSON(value.network),
        'nodes': value.nodes === undefined ? undefined : (value.nodes.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeToJSON)),
        'resources': value.resources === undefined ? undefined : (value.resources.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceToJSON)),
        'scaling': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingToJSON(value.scaling),
        'versions': value.versions === undefined ? undefined : (value.versions.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionToJSON)),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'lastTransitionTime': !exists(json, 'lastTransitionTime') ? undefined : (new Date(json['lastTransitionTime'])),
        'status': json['status'],
        'type': json['type'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'lastTransitionTime': value.lastTransitionTime === undefined ? undefined : (value.lastTransitionTime.toISOString()),
        'status': value.status,
        'type': value.type,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cidr': json['cidr'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cidr': value.cidr,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'lastTransitionTime': !exists(json, 'lastTransitionTime') ? undefined : (new Date(json['lastTransitionTime'])),
        'name': json['name'],
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'labels': value.labels,
        'lastTransitionTime': value.lastTransitionTime === undefined ? undefined : (value.lastTransitionTime.toISOString()),
        'name': value.name,
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conditions': !exists(json, 'conditions') ? undefined : (json['conditions'].map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSON)),
        'name': json['name'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conditions': value.conditions === undefined ? undefined : (value.conditions.map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionToJSON)),
        'name': value.name,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'lastTransitionTime': !exists(json, 'lastTransitionTime') ? undefined : (new Date(json['lastTransitionTime'])),
        'status': json['status'],
        'type': json['type'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'lastTransitionTime': value.lastTransitionTime === undefined ? undefined : (value.lastTransitionTime.toISOString()),
        'status': value.status,
        'type': value.type,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'desiredCapacity': json['desiredCapacity'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'desiredCapacity': value.desiredCapacity,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'lastTransitionTime': !exists(json, 'lastTransitionTime') ? undefined : (new Date(json['lastTransitionTime'])),
        'semver': json['semver'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'date': value.date === undefined ? undefined : (value.date.toISOString()),
        'lastTransitionTime': value.lastTransitionTime === undefined ? undefined : (value.lastTransitionTime.toISOString()),
        'semver': value.semver,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecFromJSON(json['spec']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecToJSON(value.spec),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apps': (json['apps'].map(ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppFromJSON)),
        'components': (json['components'].map(ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentFromJSON)),
        'date': (new Date(json['date'])),
        'state': json['state'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apps': (value.apps.map(ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppToJSON)),
        'components': (value.components.map(ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentToJSON)),
        'date': (value.date.toISOString()),
        'state': value.state,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'componentVersion': !exists(json, 'componentVersion') ? undefined : json['componentVersion'],
        'name': json['name'],
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'componentVersion': value.componentVersion,
        'name': value.name,
        'version': value.version,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'version': json['version'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'version': value.version,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': json['spec'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': value.spec,
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json['metadata']),
        'spec': ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecFromJSON(json['spec']),
        'status': ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusFromJSON(json['status']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value.metadata),
        'spec': ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecToJSON(value.spec),
        'status': ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusToJSON(value.status),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'items': (json['items'].map(ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'items': (value.items.map(ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolToJSON)),
        'kind': value.kind,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
    };
}

/* tslint:disable */
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'workspace': ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceFromJSON(json['workspace']),
    };
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'workspace': ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceToJSON(value.workspace),
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'workspaceStatus': json['workspace_status'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'workspace_status': value.workspaceStatus,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceFromJSON(json) {
    return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceFromJSONTyped(json);
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'mode': json['mode'],
    };
}
function ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'mode': value.mode,
    };
}

/* tslint:disable */
function IoK8sApiCoreV1ObjectReferenceFromJSON(json) {
    return IoK8sApiCoreV1ObjectReferenceFromJSONTyped(json);
}
function IoK8sApiCoreV1ObjectReferenceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'fieldPath': !exists(json, 'fieldPath') ? undefined : json['fieldPath'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'resourceVersion': !exists(json, 'resourceVersion') ? undefined : json['resourceVersion'],
        'uid': !exists(json, 'uid') ? undefined : json['uid'],
    };
}
function IoK8sApiCoreV1ObjectReferenceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'fieldPath': value.fieldPath,
        'kind': value.kind,
        'name': value.name,
        'namespace': value.namespace,
        'resourceVersion': value.resourceVersion,
        'uid': value.uid,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1APIGroupFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'name': json['name'],
        'preferredVersion': !exists(json, 'preferredVersion') ? undefined : IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryFromJSON(json['preferredVersion']),
        'serverAddressByClientCIDRs': !exists(json, 'serverAddressByClientCIDRs') ? undefined : (json['serverAddressByClientCIDRs'].map(IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRFromJSON)),
        'versions': (json['versions'].map(IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryFromJSON)),
    };
}
function IoK8sApimachineryPkgApisMetaV1APIGroupToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'name': value.name,
        'preferredVersion': IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryToJSON(value.preferredVersion),
        'serverAddressByClientCIDRs': value.serverAddressByClientCIDRs === undefined ? undefined : (value.serverAddressByClientCIDRs.map(IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRToJSON)),
        'versions': (value.versions.map(IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryToJSON)),
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1APIGroupListFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1APIGroupListFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1APIGroupListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'groups': (json['groups'].map(IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON)),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
    };
}
function IoK8sApimachineryPkgApisMetaV1APIGroupListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'groups': (value.groups.map(IoK8sApimachineryPkgApisMetaV1APIGroupToJSON)),
        'kind': value.kind,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1APIResourceFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1APIResourceFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1APIResourceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'categories': !exists(json, 'categories') ? undefined : json['categories'],
        'group': !exists(json, 'group') ? undefined : json['group'],
        'kind': json['kind'],
        'name': json['name'],
        'namespaced': json['namespaced'],
        'shortNames': !exists(json, 'shortNames') ? undefined : json['shortNames'],
        'singularName': json['singularName'],
        'storageVersionHash': !exists(json, 'storageVersionHash') ? undefined : json['storageVersionHash'],
        'verbs': json['verbs'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}
function IoK8sApimachineryPkgApisMetaV1APIResourceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'categories': value.categories,
        'group': value.group,
        'kind': value.kind,
        'name': value.name,
        'namespaced': value.namespaced,
        'shortNames': value.shortNames,
        'singularName': value.singularName,
        'storageVersionHash': value.storageVersionHash,
        'verbs': value.verbs,
        'version': value.version,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'groupVersion': json['groupVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'resources': (json['resources'].map(IoK8sApimachineryPkgApisMetaV1APIResourceFromJSON)),
    };
}
function IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'groupVersion': value.groupVersion,
        'kind': value.kind,
        'resources': (value.resources.map(IoK8sApimachineryPkgApisMetaV1APIResourceToJSON)),
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'dryRun': !exists(json, 'dryRun') ? undefined : json['dryRun'],
        'gracePeriodSeconds': !exists(json, 'gracePeriodSeconds') ? undefined : json['gracePeriodSeconds'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'orphanDependents': !exists(json, 'orphanDependents') ? undefined : json['orphanDependents'],
        'preconditions': !exists(json, 'preconditions') ? undefined : IoK8sApimachineryPkgApisMetaV1PreconditionsFromJSON(json['preconditions']),
        'propagationPolicy': !exists(json, 'propagationPolicy') ? undefined : json['propagationPolicy'],
    };
}
function IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'dryRun': value.dryRun,
        'gracePeriodSeconds': value.gracePeriodSeconds,
        'kind': value.kind,
        'orphanDependents': value.orphanDependents,
        'preconditions': IoK8sApimachineryPkgApisMetaV1PreconditionsToJSON(value.preconditions),
        'propagationPolicy': value.propagationPolicy,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'groupVersion': json['groupVersion'],
        'version': json['version'],
    };
}
function IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'groupVersion': value.groupVersion,
        'version': value.version,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1ListMetaFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1ListMetaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        '_continue': !exists(json, 'continue') ? undefined : json['continue'],
        'remainingItemCount': !exists(json, 'remainingItemCount') ? undefined : json['remainingItemCount'],
        'resourceVersion': !exists(json, 'resourceVersion') ? undefined : json['resourceVersion'],
        'selfLink': !exists(json, 'selfLink') ? undefined : json['selfLink'],
    };
}
function IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'continue': value._continue,
        'remainingItemCount': value.remainingItemCount,
        'resourceVersion': value.resourceVersion,
        'selfLink': value.selfLink,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'fieldsType': !exists(json, 'fieldsType') ? undefined : json['fieldsType'],
        'fieldsV1': !exists(json, 'fieldsV1') ? undefined : json['fieldsV1'],
        'manager': !exists(json, 'manager') ? undefined : json['manager'],
        'operation': !exists(json, 'operation') ? undefined : json['operation'],
        'time': !exists(json, 'time') ? undefined : (new Date(json['time'])),
    };
}
function IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'fieldsType': value.fieldsType,
        'fieldsV1': value.fieldsV1,
        'manager': value.manager,
        'operation': value.operation,
        'time': value.time === undefined ? undefined : (value.time.toISOString()),
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'annotations': !exists(json, 'annotations') ? undefined : json['annotations'],
        'clusterName': !exists(json, 'clusterName') ? undefined : json['clusterName'],
        'creationTimestamp': !exists(json, 'creationTimestamp') ? undefined : (new Date(json['creationTimestamp'])),
        'deletionGracePeriodSeconds': !exists(json, 'deletionGracePeriodSeconds') ? undefined : json['deletionGracePeriodSeconds'],
        'deletionTimestamp': !exists(json, 'deletionTimestamp') ? undefined : (new Date(json['deletionTimestamp'])),
        'finalizers': !exists(json, 'finalizers') ? undefined : json['finalizers'],
        'generateName': !exists(json, 'generateName') ? undefined : json['generateName'],
        'generation': !exists(json, 'generation') ? undefined : json['generation'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'managedFields': !exists(json, 'managedFields') ? undefined : (json['managedFields'].map(IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'ownerReferences': !exists(json, 'ownerReferences') ? undefined : (json['ownerReferences'].map(IoK8sApimachineryPkgApisMetaV1OwnerReferenceFromJSON)),
        'resourceVersion': !exists(json, 'resourceVersion') ? undefined : json['resourceVersion'],
        'selfLink': !exists(json, 'selfLink') ? undefined : json['selfLink'],
        'uid': !exists(json, 'uid') ? undefined : json['uid'],
    };
}
function IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'annotations': value.annotations,
        'clusterName': value.clusterName,
        'creationTimestamp': value.creationTimestamp === undefined ? undefined : (value.creationTimestamp.toISOString()),
        'deletionGracePeriodSeconds': value.deletionGracePeriodSeconds,
        'deletionTimestamp': value.deletionTimestamp === undefined ? undefined : (value.deletionTimestamp.toISOString()),
        'finalizers': value.finalizers,
        'generateName': value.generateName,
        'generation': value.generation,
        'labels': value.labels,
        'managedFields': value.managedFields === undefined ? undefined : (value.managedFields.map(IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryToJSON)),
        'name': value.name,
        'namespace': value.namespace,
        'ownerReferences': value.ownerReferences === undefined ? undefined : (value.ownerReferences.map(IoK8sApimachineryPkgApisMetaV1OwnerReferenceToJSON)),
        'resourceVersion': value.resourceVersion,
        'selfLink': value.selfLink,
        'uid': value.uid,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1OwnerReferenceFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1OwnerReferenceFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1OwnerReferenceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': json['apiVersion'],
        'blockOwnerDeletion': !exists(json, 'blockOwnerDeletion') ? undefined : json['blockOwnerDeletion'],
        'controller': !exists(json, 'controller') ? undefined : json['controller'],
        'kind': json['kind'],
        'name': json['name'],
        'uid': json['uid'],
    };
}
function IoK8sApimachineryPkgApisMetaV1OwnerReferenceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'blockOwnerDeletion': value.blockOwnerDeletion,
        'controller': value.controller,
        'kind': value.kind,
        'name': value.name,
        'uid': value.uid,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1PreconditionsFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1PreconditionsFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1PreconditionsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'resourceVersion': !exists(json, 'resourceVersion') ? undefined : json['resourceVersion'],
        'uid': !exists(json, 'uid') ? undefined : json['uid'],
    };
}
function IoK8sApimachineryPkgApisMetaV1PreconditionsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'resourceVersion': value.resourceVersion,
        'uid': value.uid,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'clientCIDR': json['clientCIDR'],
        'serverAddress': json['serverAddress'],
    };
}
function IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'clientCIDR': value.clientCIDR,
        'serverAddress': value.serverAddress,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1StatusFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1StatusFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1StatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'details': !exists(json, 'details') ? undefined : IoK8sApimachineryPkgApisMetaV1StatusDetailsFromJSON(json['details']),
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'metadata': !exists(json, 'metadata') ? undefined : IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON(json['metadata']),
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}
function IoK8sApimachineryPkgApisMetaV1StatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'apiVersion': value.apiVersion,
        'code': value.code,
        'details': IoK8sApimachineryPkgApisMetaV1StatusDetailsToJSON(value.details),
        'kind': value.kind,
        'message': value.message,
        'metadata': IoK8sApimachineryPkgApisMetaV1ListMetaToJSON(value.metadata),
        'reason': value.reason,
        'status': value.status,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1StatusCauseFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1StatusCauseFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1StatusCauseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'field': !exists(json, 'field') ? undefined : json['field'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
    };
}
function IoK8sApimachineryPkgApisMetaV1StatusCauseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'field': value.field,
        'message': value.message,
        'reason': value.reason,
    };
}

/* tslint:disable */
function IoK8sApimachineryPkgApisMetaV1StatusDetailsFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1StatusDetailsFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1StatusDetailsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'causes': !exists(json, 'causes') ? undefined : (json['causes'].map(IoK8sApimachineryPkgApisMetaV1StatusCauseFromJSON)),
        'group': !exists(json, 'group') ? undefined : json['group'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'retryAfterSeconds': !exists(json, 'retryAfterSeconds') ? undefined : json['retryAfterSeconds'],
        'uid': !exists(json, 'uid') ? undefined : json['uid'],
    };
}
function IoK8sApimachineryPkgApisMetaV1StatusDetailsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'causes': value.causes === undefined ? undefined : (value.causes.map(IoK8sApimachineryPkgApisMetaV1StatusCauseToJSON)),
        'group': value.group,
        'kind': value.kind,
        'name': value.name,
        'retryAfterSeconds': value.retryAfterSeconds,
        'uid': value.uid,
    };
}

/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(json) {
    return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSONTyped(json);
}
function IoK8sApimachineryPkgApisMetaV1WatchEventFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'object': json['object'],
        'type': json['type'],
    };
}
function IoK8sApimachineryPkgApisMetaV1WatchEventToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'object': value.object,
        'type': value.type,
    };
}

/* tslint:disable */
/**
 *
 */
var ApisApi = /** @class */ (function (_super) {
    __extends(ApisApi, _super);
    function ApisApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get available API versions
     */
    ApisApi.prototype.getAPIVersionsRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available API versions
     */
    ApisApi.prototype.getAPIVersions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAPIVersionsRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ApisApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ApplicationGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(ApplicationGiantswarmIoApi, _super);
    function ApplicationGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    ApplicationGiantswarmIoApi.prototype.getApplicationGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    ApplicationGiantswarmIoApi.prototype.getApplicationGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getApplicationGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ApplicationGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ApplicationGiantswarmIoV1alpha1Api = /** @class */ (function (_super) {
    __extends(ApplicationGiantswarmIoV1alpha1Api, _super);
    function ApplicationGiantswarmIoV1alpha1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * create an AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.createApplicationGiantswarmIoV1alpha1AppCatalogRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createApplicationGiantswarmIoV1alpha1AppCatalog.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/appcatalogs",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.createApplicationGiantswarmIoV1alpha1AppCatalog = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create an App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.createApplicationGiantswarmIoV1alpha1NamespacedAppRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.createApplicationGiantswarmIoV1alpha1NamespacedApp = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.createApplicationGiantswarmIoV1alpha1NamespacedChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.createApplicationGiantswarmIoV1alpha1NamespacedChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1AppCatalogRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1AppCatalog.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/appcatalogs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1AppCatalog = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1CollectionAppCatalogRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/appcatalogs",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1CollectionAppCatalog = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteApplicationGiantswarmIoV1alpha1CollectionAppCatalogRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedAppRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedApp.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedApp = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedAppRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1NamespacedAppRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1NamespacedApp = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1NamespacedChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.deleteApplicationGiantswarmIoV1alpha1NamespacedChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.getApplicationGiantswarmIoV1alpha1APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.getApplicationGiantswarmIoV1alpha1APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getApplicationGiantswarmIoV1alpha1APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1AppCatalogRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/appcatalogs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1AppCatalog = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1AppForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/apps",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1AppForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listApplicationGiantswarmIoV1alpha1AppForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1ChartForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/charts",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1ChartForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listApplicationGiantswarmIoV1alpha1ChartForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1NamespacedAppRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1NamespacedApp = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1NamespacedChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.listApplicationGiantswarmIoV1alpha1NamespacedChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.patchApplicationGiantswarmIoV1alpha1AppCatalogRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchApplicationGiantswarmIoV1alpha1AppCatalog.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchApplicationGiantswarmIoV1alpha1AppCatalog.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/appcatalogs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.patchApplicationGiantswarmIoV1alpha1AppCatalog = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.patchApplicationGiantswarmIoV1alpha1NamespacedAppRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.patchApplicationGiantswarmIoV1alpha1NamespacedApp = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.patchApplicationGiantswarmIoV1alpha1NamespacedChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.patchApplicationGiantswarmIoV1alpha1NamespacedChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.readApplicationGiantswarmIoV1alpha1AppCatalogRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readApplicationGiantswarmIoV1alpha1AppCatalog.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/appcatalogs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.readApplicationGiantswarmIoV1alpha1AppCatalog = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.readApplicationGiantswarmIoV1alpha1NamespacedAppRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.readApplicationGiantswarmIoV1alpha1NamespacedApp = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.readApplicationGiantswarmIoV1alpha1NamespacedChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.readApplicationGiantswarmIoV1alpha1NamespacedChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.replaceApplicationGiantswarmIoV1alpha1AppCatalogRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1AppCatalog.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1AppCatalog.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/appcatalogs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AppCatalog
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.replaceApplicationGiantswarmIoV1alpha1AppCatalog = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.replaceApplicationGiantswarmIoV1alpha1NamespacedAppRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified App
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.replaceApplicationGiantswarmIoV1alpha1NamespacedApp = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.replaceApplicationGiantswarmIoV1alpha1NamespacedChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified Chart
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.replaceApplicationGiantswarmIoV1alpha1NamespacedChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AppCatalog. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1AppCatalogRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchApplicationGiantswarmIoV1alpha1AppCatalog.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/watch/appcatalogs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AppCatalog. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1AppCatalog = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AppCatalog. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1AppCatalogListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/watch/appcatalogs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AppCatalog. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1AppCatalogList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchApplicationGiantswarmIoV1alpha1AppCatalogListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of App. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1AppListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/watch/apps",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of App. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1AppListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchApplicationGiantswarmIoV1alpha1AppListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Chart. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1ChartListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/watch/charts",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Chart. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1ChartListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchApplicationGiantswarmIoV1alpha1ChartListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind App. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1NamespacedAppRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedApp.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/apps/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind App. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1NamespacedApp = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of App. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1NamespacedAppListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedAppList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/apps".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of App. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1NamespacedAppList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchApplicationGiantswarmIoV1alpha1NamespacedAppListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind Chart. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1NamespacedChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/charts/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind Chart. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1NamespacedChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Chart. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1NamespacedChartListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedChartList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/application.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/charts".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Chart. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ApplicationGiantswarmIoV1alpha1Api.prototype.watchApplicationGiantswarmIoV1alpha1NamespacedChartList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchApplicationGiantswarmIoV1alpha1NamespacedChartListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ApplicationGiantswarmIoV1alpha1Api;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var BackupGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(BackupGiantswarmIoApi, _super);
    function BackupGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    BackupGiantswarmIoApi.prototype.getBackupGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    BackupGiantswarmIoApi.prototype.getBackupGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBackupGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return BackupGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var BackupGiantswarmIoV1alpha1Api = /** @class */ (function (_super) {
    __extends(BackupGiantswarmIoV1alpha1Api, _super);
    function BackupGiantswarmIoV1alpha1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * create an ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.createBackupGiantswarmIoV1alpha1ETCDBackupRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createBackupGiantswarmIoV1alpha1ETCDBackup.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/etcdbackups",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.createBackupGiantswarmIoV1alpha1ETCDBackup = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.deleteBackupGiantswarmIoV1alpha1CollectionETCDBackupRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/etcdbackups",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.deleteBackupGiantswarmIoV1alpha1CollectionETCDBackup = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteBackupGiantswarmIoV1alpha1CollectionETCDBackupRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.deleteBackupGiantswarmIoV1alpha1ETCDBackupRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteBackupGiantswarmIoV1alpha1ETCDBackup.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/etcdbackups/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.deleteBackupGiantswarmIoV1alpha1ETCDBackup = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get available resources
     */
    BackupGiantswarmIoV1alpha1Api.prototype.getBackupGiantswarmIoV1alpha1APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    BackupGiantswarmIoV1alpha1Api.prototype.getBackupGiantswarmIoV1alpha1APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBackupGiantswarmIoV1alpha1APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.listBackupGiantswarmIoV1alpha1ETCDBackupRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/etcdbackups",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.listBackupGiantswarmIoV1alpha1ETCDBackup = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.patchBackupGiantswarmIoV1alpha1ETCDBackupRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchBackupGiantswarmIoV1alpha1ETCDBackup.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchBackupGiantswarmIoV1alpha1ETCDBackup.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/etcdbackups/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.patchBackupGiantswarmIoV1alpha1ETCDBackup = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.readBackupGiantswarmIoV1alpha1ETCDBackupRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readBackupGiantswarmIoV1alpha1ETCDBackup.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/etcdbackups/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.readBackupGiantswarmIoV1alpha1ETCDBackup = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.replaceBackupGiantswarmIoV1alpha1ETCDBackupRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceBackupGiantswarmIoV1alpha1ETCDBackup.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceBackupGiantswarmIoV1alpha1ETCDBackup.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/etcdbackups/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified ETCDBackup
     */
    BackupGiantswarmIoV1alpha1Api.prototype.replaceBackupGiantswarmIoV1alpha1ETCDBackup = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind ETCDBackup. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    BackupGiantswarmIoV1alpha1Api.prototype.watchBackupGiantswarmIoV1alpha1ETCDBackupRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchBackupGiantswarmIoV1alpha1ETCDBackup.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/watch/etcdbackups/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind ETCDBackup. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    BackupGiantswarmIoV1alpha1Api.prototype.watchBackupGiantswarmIoV1alpha1ETCDBackup = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of ETCDBackup. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    BackupGiantswarmIoV1alpha1Api.prototype.watchBackupGiantswarmIoV1alpha1ETCDBackupListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/backup.giantswarm.io/v1alpha1/watch/etcdbackups",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of ETCDBackup. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    BackupGiantswarmIoV1alpha1Api.prototype.watchBackupGiantswarmIoV1alpha1ETCDBackupList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchBackupGiantswarmIoV1alpha1ETCDBackupListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return BackupGiantswarmIoV1alpha1Api;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var CoreGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(CoreGiantswarmIoApi, _super);
    function CoreGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    CoreGiantswarmIoApi.prototype.getCoreGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    CoreGiantswarmIoApi.prototype.getCoreGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCoreGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return CoreGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var CoreGiantswarmIoV1alpha1Api = /** @class */ (function (_super) {
    __extends(CoreGiantswarmIoV1alpha1Api, _super);
    function CoreGiantswarmIoV1alpha1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * create an AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create an AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedCertConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedChartConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedDrainerConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedFlannelConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create an Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedIgnition = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.createCoreGiantswarmIoV1alpha1NamespacedStorageConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAWSClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedAzureClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedCertConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedChartConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedDrainerConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedFlannelConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnitionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnition.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnition = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedIgnitionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedKVMClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1CollectionNamespacedStorageConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedCertConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedChartConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedIgnition = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get available resources
     */
    CoreGiantswarmIoV1alpha1Api.prototype.getCoreGiantswarmIoV1alpha1APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    CoreGiantswarmIoV1alpha1Api.prototype.getCoreGiantswarmIoV1alpha1APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCoreGiantswarmIoV1alpha1APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/awsclusterconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1AWSClusterConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/azureclusterconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1AzureClusterConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1CertConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/certconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1CertConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1CertConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1ChartConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/chartconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1ChartConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1ChartConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/drainerconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1DrainerConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/flannelconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1FlannelConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1IgnitionForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/ignitions",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1IgnitionForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1IgnitionForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/kvmclusterconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1KVMClusterConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedCertConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedChartConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedDrainerConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedFlannelConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedIgnition = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1NamespacedStorageConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1StorageConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/storageconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.listCoreGiantswarmIoV1alpha1StorageConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listCoreGiantswarmIoV1alpha1StorageConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedCertConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedChartConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedIgnition = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.patchCoreGiantswarmIoV1alpha1NamespacedStorageConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedCertConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedChartConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedDrainerConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedFlannelConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedIgnition = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.readCoreGiantswarmIoV1alpha1NamespacedStorageConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/awsclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AWSClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/azureclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AzureClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/certconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified CertConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedCertConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/chartconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified ChartConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedChartConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/drainerconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified DrainerConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/flannelconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified FlannelConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/ignitions/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified Ignition
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedIgnition = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified KVMClusterConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/namespaces/{namespace}/storageconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified StorageConfig
     */
    CoreGiantswarmIoV1alpha1Api.prototype.replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/awsclusterconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1AWSClusterConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/azureclusterconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1AzureClusterConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of CertConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/certconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of CertConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1CertConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/chartconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1ChartConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/drainerconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1DrainerConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/flannelconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1FlannelConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Ignition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/ignitions",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Ignition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1IgnitionListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/kvmclusterconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1KVMClusterConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/awsclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/awsclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedAWSClusterConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azureclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azureclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedAzureClusterConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind CertConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedCertConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/certconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind CertConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedCertConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedCertConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of CertConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedCertConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedCertConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/certconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of CertConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedCertConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedCertConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedChartConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/chartconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedChartConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedChartConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedChartConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedChartConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/chartconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of ChartConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedChartConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedChartConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/drainerconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/drainerconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of DrainerConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedDrainerConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/flannelconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/flannelconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of FlannelConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedFlannelConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind Ignition. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedIgnition.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/ignitions/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind Ignition. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedIgnition = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedIgnitionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Ignition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedIgnitionListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedIgnitionList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/ignitions".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Ignition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedIgnitionList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedIgnitionListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/kvmclusterconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/kvmclusterconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of KVMClusterConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedKVMClusterConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedStorageConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/storageconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedStorageConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/storageconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1NamespacedStorageConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/core.giantswarm.io/v1alpha1/watch/storageconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of StorageConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    CoreGiantswarmIoV1alpha1Api.prototype.watchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchCoreGiantswarmIoV1alpha1StorageConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return CoreGiantswarmIoV1alpha1Api;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ExampleGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(ExampleGiantswarmIoApi, _super);
    function ExampleGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    ExampleGiantswarmIoApi.prototype.getExampleGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/example.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    ExampleGiantswarmIoApi.prototype.getExampleGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getExampleGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ExampleGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ExampleGiantswarmIoV1alpha1Api = /** @class */ (function (_super) {
    __extends(ExampleGiantswarmIoV1alpha1Api, _super);
    function ExampleGiantswarmIoV1alpha1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get available resources
     */
    ExampleGiantswarmIoV1alpha1Api.prototype.getExampleGiantswarmIoV1alpha1APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/example.giantswarm.io/v1alpha1/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ExampleGiantswarmIoV1alpha1Api.prototype.getExampleGiantswarmIoV1alpha1APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getExampleGiantswarmIoV1alpha1APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified MemcachedConfig
     */
    ExampleGiantswarmIoV1alpha1Api.prototype.readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/example.giantswarm.io/v1alpha1/namespaces/{namespace}/memcachedconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified MemcachedConfig
     */
    ExampleGiantswarmIoV1alpha1Api.prototype.readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ExampleGiantswarmIoV1alpha1Api;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var InfrastructureGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(InfrastructureGiantswarmIoApi, _super);
    function InfrastructureGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    InfrastructureGiantswarmIoApi.prototype.getInfrastructureGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    InfrastructureGiantswarmIoApi.prototype.getInfrastructureGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfrastructureGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return InfrastructureGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var InfrastructureGiantswarmIoV1alpha2Api = /** @class */ (function (_super) {
    __extends(InfrastructureGiantswarmIoV1alpha2Api, _super);
    function InfrastructureGiantswarmIoV1alpha2Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * create an AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create an AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create an AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSClusterRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSCluster.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSCluster = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSClusterRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeploymentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeployment.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeployment = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedAWSMachineDeploymentRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInfrastructureGiantswarmIoV1alpha2CollectionNamespacedG8sControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get available resources
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.getInfrastructureGiantswarmIoV1alpha2APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.getInfrastructureGiantswarmIoV1alpha2APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfrastructureGiantswarmIoV1alpha2APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/awsclusters",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInfrastructureGiantswarmIoV1alpha2AWSClusterForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/awscontrolplanes",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInfrastructureGiantswarmIoV1alpha2AWSControlPlaneForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/awsmachinedeployments",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/g8scontrolplanes",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInfrastructureGiantswarmIoV1alpha2G8sControlPlaneForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.listInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsclusters/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AWSCluster
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awscontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AWSControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/awsmachinedeployments/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AWSMachineDeployment
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/namespaces/{namespace}/g8scontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified G8sControlPlane
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/awsclusters",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2AWSClusterListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/awscontrolplanes",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2AWSControlPlaneListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/awsmachinedeployments",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2AWSMachineDeploymentListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/g8scontrolplanes",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2G8sControlPlaneListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awsclusters/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSCluster = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awsclusters".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSCluster. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSClusterListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awscontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awscontrolplanes".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSControlPlaneListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awsmachinedeployments/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeployment = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/awsmachinedeployments".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSMachineDeployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2NamespacedAWSMachineDeploymentListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/g8scontrolplanes/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlane = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/infrastructure.giantswarm.io/v1alpha2/watch/namespaces/{namespace}/g8scontrolplanes".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of G8sControlPlane. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    InfrastructureGiantswarmIoV1alpha2Api.prototype.watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchInfrastructureGiantswarmIoV1alpha2NamespacedG8sControlPlaneListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return InfrastructureGiantswarmIoV1alpha2Api;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ProviderGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(ProviderGiantswarmIoApi, _super);
    function ProviderGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    ProviderGiantswarmIoApi.prototype.getProviderGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    ProviderGiantswarmIoApi.prototype.getProviderGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getProviderGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ProviderGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ProviderGiantswarmIoV1alpha1Api = /** @class */ (function (_super) {
    __extends(ProviderGiantswarmIoV1alpha1Api, _super);
    function ProviderGiantswarmIoV1alpha1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * create an AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.createProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.createProviderGiantswarmIoV1alpha1NamespacedAWSConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create an AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.createProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.createProviderGiantswarmIoV1alpha1NamespacedAzureConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * create a KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.createProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.createProviderGiantswarmIoV1alpha1NamespacedKVMConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAWSConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedAzureConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteProviderGiantswarmIoV1alpha1CollectionNamespacedKVMConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.getProviderGiantswarmIoV1alpha1APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.getProviderGiantswarmIoV1alpha1APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getProviderGiantswarmIoV1alpha1APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1AWSConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/awsconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1AWSConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listProviderGiantswarmIoV1alpha1AWSConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1AzureConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/azureconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1AzureConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listProviderGiantswarmIoV1alpha1AzureConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1KVMConfigForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/kvmconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1KVMConfigForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listProviderGiantswarmIoV1alpha1KVMConfigForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1NamespacedAWSConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1NamespacedAzureConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.listProviderGiantswarmIoV1alpha1NamespacedKVMConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.patchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.patchProviderGiantswarmIoV1alpha1NamespacedAWSConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.patchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.patchProviderGiantswarmIoV1alpha1NamespacedAzureConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.patchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.patchProviderGiantswarmIoV1alpha1NamespacedKVMConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.readProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.readProviderGiantswarmIoV1alpha1NamespacedAWSConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.readProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.readProviderGiantswarmIoV1alpha1NamespacedAzureConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.readProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.readProviderGiantswarmIoV1alpha1NamespacedKVMConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/awsconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AWSConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/azureconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AzureConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/namespaces/{namespace}/kvmconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified KVMConfig
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/awsconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1AWSConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/azureconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1AzureConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/kvmconfigs",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1KVMConfigListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAWSConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/awsconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedAWSConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/awsconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AWSConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1NamespacedAWSConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAzureConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azureconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedAzureConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azureconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1NamespacedAzureConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedKVMConfig.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/kvmconfigs/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedKVMConfig = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/provider.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/kvmconfigs".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of KVMConfig. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ProviderGiantswarmIoV1alpha1Api.prototype.watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchProviderGiantswarmIoV1alpha1NamespacedKVMConfigListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ProviderGiantswarmIoV1alpha1Api;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ReleaseGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(ReleaseGiantswarmIoApi, _super);
    function ReleaseGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    ReleaseGiantswarmIoApi.prototype.getReleaseGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    ReleaseGiantswarmIoApi.prototype.getReleaseGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getReleaseGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ReleaseGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ReleaseGiantswarmIoV1alpha1Api = /** @class */ (function (_super) {
    __extends(ReleaseGiantswarmIoV1alpha1Api, _super);
    function ReleaseGiantswarmIoV1alpha1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * create a Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.createReleaseGiantswarmIoV1alpha1ReleaseRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createReleaseGiantswarmIoV1alpha1Release.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/releases",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create a Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.createReleaseGiantswarmIoV1alpha1Release = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.deleteReleaseGiantswarmIoV1alpha1CollectionReleaseRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/releases",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.deleteReleaseGiantswarmIoV1alpha1CollectionRelease = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteReleaseGiantswarmIoV1alpha1CollectionReleaseRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete a Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.deleteReleaseGiantswarmIoV1alpha1ReleaseRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteReleaseGiantswarmIoV1alpha1Release.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/releases/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete a Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.deleteReleaseGiantswarmIoV1alpha1Release = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.getReleaseGiantswarmIoV1alpha1APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.getReleaseGiantswarmIoV1alpha1APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getReleaseGiantswarmIoV1alpha1APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.listReleaseGiantswarmIoV1alpha1ReleaseRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/releases",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.listReleaseGiantswarmIoV1alpha1Release = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.patchReleaseGiantswarmIoV1alpha1ReleaseRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchReleaseGiantswarmIoV1alpha1Release.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchReleaseGiantswarmIoV1alpha1Release.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/releases/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.patchReleaseGiantswarmIoV1alpha1Release = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.readReleaseGiantswarmIoV1alpha1ReleaseRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readReleaseGiantswarmIoV1alpha1Release.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/releases/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.readReleaseGiantswarmIoV1alpha1Release = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.replaceReleaseGiantswarmIoV1alpha1ReleaseRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceReleaseGiantswarmIoV1alpha1Release.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceReleaseGiantswarmIoV1alpha1Release.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/releases/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified Release
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.replaceReleaseGiantswarmIoV1alpha1Release = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind Release. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.watchReleaseGiantswarmIoV1alpha1ReleaseRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchReleaseGiantswarmIoV1alpha1Release.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/watch/releases/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind Release. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.watchReleaseGiantswarmIoV1alpha1Release = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Release. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.watchReleaseGiantswarmIoV1alpha1ReleaseListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/release.giantswarm.io/v1alpha1/watch/releases",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Release. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ReleaseGiantswarmIoV1alpha1Api.prototype.watchReleaseGiantswarmIoV1alpha1ReleaseList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchReleaseGiantswarmIoV1alpha1ReleaseListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ReleaseGiantswarmIoV1alpha1Api;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var SecurityGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(SecurityGiantswarmIoApi, _super);
    function SecurityGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    SecurityGiantswarmIoApi.prototype.getSecurityGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    SecurityGiantswarmIoApi.prototype.getSecurityGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSecurityGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SecurityGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var SecurityGiantswarmIoV1alpha1Api = /** @class */ (function (_super) {
    __extends(SecurityGiantswarmIoV1alpha1Api, _super);
    function SecurityGiantswarmIoV1alpha1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * create an Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.createSecurityGiantswarmIoV1alpha1OrganizationRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createSecurityGiantswarmIoV1alpha1Organization.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/organizations",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.createSecurityGiantswarmIoV1alpha1Organization = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.deleteSecurityGiantswarmIoV1alpha1CollectionOrganizationRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/organizations",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.deleteSecurityGiantswarmIoV1alpha1CollectionOrganization = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteSecurityGiantswarmIoV1alpha1CollectionOrganizationRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.deleteSecurityGiantswarmIoV1alpha1OrganizationRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteSecurityGiantswarmIoV1alpha1Organization.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/organizations/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.deleteSecurityGiantswarmIoV1alpha1Organization = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get available resources
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.getSecurityGiantswarmIoV1alpha1APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.getSecurityGiantswarmIoV1alpha1APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSecurityGiantswarmIoV1alpha1APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.listSecurityGiantswarmIoV1alpha1OrganizationRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/organizations",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.listSecurityGiantswarmIoV1alpha1Organization = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.patchSecurityGiantswarmIoV1alpha1OrganizationRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchSecurityGiantswarmIoV1alpha1Organization.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchSecurityGiantswarmIoV1alpha1Organization.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/organizations/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.patchSecurityGiantswarmIoV1alpha1Organization = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.readSecurityGiantswarmIoV1alpha1OrganizationRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readSecurityGiantswarmIoV1alpha1Organization.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/organizations/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.readSecurityGiantswarmIoV1alpha1Organization = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.replaceSecurityGiantswarmIoV1alpha1OrganizationRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceSecurityGiantswarmIoV1alpha1Organization.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceSecurityGiantswarmIoV1alpha1Organization.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/organizations/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified Organization
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.replaceSecurityGiantswarmIoV1alpha1Organization = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind Organization. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.watchSecurityGiantswarmIoV1alpha1OrganizationRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchSecurityGiantswarmIoV1alpha1Organization.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/watch/organizations/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind Organization. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.watchSecurityGiantswarmIoV1alpha1Organization = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchSecurityGiantswarmIoV1alpha1OrganizationRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Organization. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.watchSecurityGiantswarmIoV1alpha1OrganizationListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/security.giantswarm.io/v1alpha1/watch/organizations",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of Organization. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    SecurityGiantswarmIoV1alpha1Api.prototype.watchSecurityGiantswarmIoV1alpha1OrganizationList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchSecurityGiantswarmIoV1alpha1OrganizationListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SecurityGiantswarmIoV1alpha1Api;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ToolingGiantswarmIoApi = /** @class */ (function (_super) {
    __extends(ToolingGiantswarmIoApi, _super);
    function ToolingGiantswarmIoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get information of a group
     */
    ToolingGiantswarmIoApi.prototype.getToolingGiantswarmIoAPIGroupRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get information of a group
     */
    ToolingGiantswarmIoApi.prototype.getToolingGiantswarmIoAPIGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getToolingGiantswarmIoAPIGroupRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ToolingGiantswarmIoApi;
}(BaseAPI));

/* tslint:disable */
/**
 *
 */
var ToolingGiantswarmIoV1alpha1Api = /** @class */ (function (_super) {
    __extends(ToolingGiantswarmIoV1alpha1Api, _super);
    function ToolingGiantswarmIoV1alpha1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * create an AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.createToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * create an AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.createToolingGiantswarmIoV1alpha1NamespacedAzureTool = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete collection of AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.deleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureToolRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureTool.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete collection of AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.deleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureTool = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureToolRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * delete an AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.deleteToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.gracePeriodSeconds !== undefined) {
                            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
                        }
                        if (requestParameters.orphanDependents !== undefined) {
                            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
                        }
                        if (requestParameters.propagationPolicy !== undefined) {
                            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * delete an AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.deleteToolingGiantswarmIoV1alpha1NamespacedAzureTool = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.getToolingGiantswarmIoV1alpha1APIResourcesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get available resources
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.getToolingGiantswarmIoV1alpha1APIResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getToolingGiantswarmIoV1alpha1APIResourcesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.listToolingGiantswarmIoV1alpha1AzureToolForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/azuretools",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.listToolingGiantswarmIoV1alpha1AzureToolForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listToolingGiantswarmIoV1alpha1AzureToolForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.listToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * list or watch objects of kind AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.listToolingGiantswarmIoV1alpha1NamespacedAzureTool = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * partially update the specified AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.patchToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json-patch+json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * partially update the specified AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.patchToolingGiantswarmIoV1alpha1NamespacedAzureTool = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.patchToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * read the specified AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.readToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * read the specified AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.readToolingGiantswarmIoV1alpha1NamespacedAzureTool = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * replace the specified AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.replaceToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        queryParameters = {};
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.dryRun !== undefined) {
                            queryParameters['dryRun'] = requestParameters.dryRun;
                        }
                        if (requestParameters.fieldManager !== undefined) {
                            queryParameters['fieldManager'] = requestParameters.fieldManager;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolToJSON(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * replace the specified AzureTool
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.replaceToolingGiantswarmIoV1alpha1NamespacedAzureTool = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.replaceToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureTool. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.watchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespacesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/watch/azuretools",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureTool. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.watchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespaces = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespacesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AzureTool. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.watchToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling watchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azuretools/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))).replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch changes to an object of kind AzureTool. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.watchToolingGiantswarmIoV1alpha1NamespacedAzureTool = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureTool. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.watchToolingGiantswarmIoV1alpha1NamespacedAzureToolListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                            throw new RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling watchToolingGiantswarmIoV1alpha1NamespacedAzureToolList.');
                        }
                        queryParameters = {};
                        if (requestParameters.allowWatchBookmarks !== undefined) {
                            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
                        }
                        if (requestParameters._continue !== undefined) {
                            queryParameters['continue'] = requestParameters._continue;
                        }
                        if (requestParameters.fieldSelector !== undefined) {
                            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
                        }
                        if (requestParameters.labelSelector !== undefined) {
                            queryParameters['labelSelector'] = requestParameters.labelSelector;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.pretty !== undefined) {
                            queryParameters['pretty'] = requestParameters.pretty;
                        }
                        if (requestParameters.resourceVersion !== undefined) {
                            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
                        }
                        if (requestParameters.timeoutSeconds !== undefined) {
                            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
                        }
                        if (requestParameters.watch !== undefined) {
                            queryParameters['watch'] = requestParameters.watch;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/apis/tooling.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azuretools".replace("{" + "namespace" + "}", encodeURIComponent(String(requestParameters.namespace))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new JSONApiResponse(response, function (jsonValue) { return IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * watch individual changes to a list of AzureTool. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    ToolingGiantswarmIoV1alpha1Api.prototype.watchToolingGiantswarmIoV1alpha1NamespacedAzureToolList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.watchToolingGiantswarmIoV1alpha1NamespacedAzureToolListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ToolingGiantswarmIoV1alpha1Api;
}(BaseAPI));

export { ApisApi, ApplicationGiantswarmIoApi, ApplicationGiantswarmIoV1alpha1Api, BASE_PATH, BackupGiantswarmIoApi, BackupGiantswarmIoV1alpha1Api, BaseAPI, BlobApiResponse, COLLECTION_FORMATS, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigConfigMapToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecStorageToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigConfigMapToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigContextToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecKubeConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigConfigMapToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppSpecUserConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusReleaseToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigConfigMapToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseFromJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusReleaseToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartToJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListFromJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListToJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupToJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusIndexToJSON, ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDInstanceBackupStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestCredentialSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestMasterToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecGuestWorkerToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AzureClusterConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecCertToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1CertConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecChartToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecConfigMapToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ChartConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterAPIToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestClusterToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestNodeToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecGuestToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusConditionToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1DrainerConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecDNSToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecNTPToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecBridgeToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecClusterToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFlannelToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecHealthToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1FlannelConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerDaemonToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerNetworkSetupToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerGroupToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataOwnerUserToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileMetadataToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitMetadataToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesAPIToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesDNSToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesKubeletToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecOIDCToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionStatusVerificationToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestMasterToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecGuestWorkerToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1KVMClusterConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageFromJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecStorageToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1StorageConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterListToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterDNSToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterKubeProxyToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCClaimsToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterOIDCToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecClusterToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderCredentialSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderMasterToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderPodsToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecProviderToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderNetworkToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusProviderToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSClusterToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneListToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSControlPlaneToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentListToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecInstanceDistributionToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolMachineToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolScalingToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecNodePoolToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecProviderWorkerToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusProviderWorkerToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2AWSMachineDeploymentToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusConditionToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2CommonClusterStatusVersionToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneListToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisInfrastructureV1alpha2G8sControlPlaneToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIELBToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdELBToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesZoneToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressELBToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAutoScalingGroupToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPrivateToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetPublicToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneSubnetToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSAvailabilityZoneToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusAWSToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesDNSZoneToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureDNSZonesToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureNodeToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecAzureVirtualNetworkToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressLoadBalancerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderIngressToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusProviderToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AzureConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCalicoToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterCustomerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerDaemonToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterEtcdToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesAPIToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesDNSToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesIngressControllerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesKubeletToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupKubeProxyToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesNetworkSetupToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesSSHUserToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterKubernetesToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterNodeToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterScalingToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1ClusterToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigListToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMEndpointUpdaterToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMK8sKVMToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFlannelToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNetworkToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerDockerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeControllerToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMNodeToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMPortMappingsToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecKVMToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigSpecVersionBundleToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusKVMToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1KVMConfigToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterConditionToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNetworkToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterNodeToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceConditionToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterResourceToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterScalingToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterToJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionFromJSON, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1StatusClusterVersionToJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListFromJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListToJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppFromJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecAppToJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentFromJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecComponentToJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseToJSON, ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSON, ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListFromJSON, ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationListToJSON, ComGithubGiantswarmApiextensionsPkgApisSecurityV1alpha1OrganizationToJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListToJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecFromJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolSpecToJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusFromJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolStatusToJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolToJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceFromJSON, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceFromJSONTyped, ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolWorkspaceToJSON, Configuration, CoreGiantswarmIoApi, CoreGiantswarmIoV1alpha1Api, ExampleGiantswarmIoApi, ExampleGiantswarmIoV1alpha1Api, InfrastructureGiantswarmIoApi, InfrastructureGiantswarmIoV1alpha2Api, IoK8sApiCoreV1ObjectReferenceFromJSON, IoK8sApiCoreV1ObjectReferenceFromJSONTyped, IoK8sApiCoreV1ObjectReferenceToJSON, IoK8sApimachineryPkgApisMetaV1APIGroupFromJSON, IoK8sApimachineryPkgApisMetaV1APIGroupFromJSONTyped, IoK8sApimachineryPkgApisMetaV1APIGroupListFromJSON, IoK8sApimachineryPkgApisMetaV1APIGroupListFromJSONTyped, IoK8sApimachineryPkgApisMetaV1APIGroupListToJSON, IoK8sApimachineryPkgApisMetaV1APIGroupToJSON, IoK8sApimachineryPkgApisMetaV1APIResourceFromJSON, IoK8sApimachineryPkgApisMetaV1APIResourceFromJSONTyped, IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON, IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSONTyped, IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON, IoK8sApimachineryPkgApisMetaV1APIResourceToJSON, IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON, IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSONTyped, IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON, IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryFromJSON, IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryFromJSONTyped, IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscoveryToJSON, IoK8sApimachineryPkgApisMetaV1ListMetaFromJSON, IoK8sApimachineryPkgApisMetaV1ListMetaFromJSONTyped, IoK8sApimachineryPkgApisMetaV1ListMetaToJSON, IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryFromJSON, IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryFromJSONTyped, IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryToJSON, IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSON, IoK8sApimachineryPkgApisMetaV1ObjectMetaFromJSONTyped, IoK8sApimachineryPkgApisMetaV1ObjectMetaToJSON, IoK8sApimachineryPkgApisMetaV1OwnerReferenceFromJSON, IoK8sApimachineryPkgApisMetaV1OwnerReferenceFromJSONTyped, IoK8sApimachineryPkgApisMetaV1OwnerReferenceToJSON, IoK8sApimachineryPkgApisMetaV1PreconditionsFromJSON, IoK8sApimachineryPkgApisMetaV1PreconditionsFromJSONTyped, IoK8sApimachineryPkgApisMetaV1PreconditionsToJSON, IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRFromJSON, IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRFromJSONTyped, IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDRToJSON, IoK8sApimachineryPkgApisMetaV1StatusCauseFromJSON, IoK8sApimachineryPkgApisMetaV1StatusCauseFromJSONTyped, IoK8sApimachineryPkgApisMetaV1StatusCauseToJSON, IoK8sApimachineryPkgApisMetaV1StatusDetailsFromJSON, IoK8sApimachineryPkgApisMetaV1StatusDetailsFromJSONTyped, IoK8sApimachineryPkgApisMetaV1StatusDetailsToJSON, IoK8sApimachineryPkgApisMetaV1StatusFromJSON, IoK8sApimachineryPkgApisMetaV1StatusFromJSONTyped, IoK8sApimachineryPkgApisMetaV1StatusToJSON, IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON, IoK8sApimachineryPkgApisMetaV1WatchEventFromJSONTyped, IoK8sApimachineryPkgApisMetaV1WatchEventToJSON, JSONApiResponse, ProviderGiantswarmIoApi, ProviderGiantswarmIoV1alpha1Api, ReleaseGiantswarmIoApi, ReleaseGiantswarmIoV1alpha1Api, RequiredError, SecurityGiantswarmIoApi, SecurityGiantswarmIoV1alpha1Api, TextApiResponse, ToolingGiantswarmIoApi, ToolingGiantswarmIoV1alpha1Api, VoidApiResponse, canConsumeForm, exists, mapValues, querystring };
