/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppToJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogToJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogList,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppList,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListToJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartToJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartList,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateApplicationGiantswarmIoV1alpha1AppCatalogRequest {
    body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateApplicationGiantswarmIoV1alpha1NamespacedAppRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateApplicationGiantswarmIoV1alpha1NamespacedChartRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteApplicationGiantswarmIoV1alpha1AppCatalogRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteApplicationGiantswarmIoV1alpha1CollectionAppCatalogRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteApplicationGiantswarmIoV1alpha1CollectionNamespacedAppRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChartRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteApplicationGiantswarmIoV1alpha1NamespacedAppRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteApplicationGiantswarmIoV1alpha1NamespacedChartRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListApplicationGiantswarmIoV1alpha1AppCatalogRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListApplicationGiantswarmIoV1alpha1AppForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListApplicationGiantswarmIoV1alpha1ChartForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListApplicationGiantswarmIoV1alpha1NamespacedAppRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListApplicationGiantswarmIoV1alpha1NamespacedChartRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchApplicationGiantswarmIoV1alpha1AppCatalogRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchApplicationGiantswarmIoV1alpha1NamespacedAppRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchApplicationGiantswarmIoV1alpha1NamespacedChartRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadApplicationGiantswarmIoV1alpha1AppCatalogRequest {
    name: string;
    pretty?: string;
}

export interface ReadApplicationGiantswarmIoV1alpha1NamespacedAppRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadApplicationGiantswarmIoV1alpha1NamespacedChartRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceApplicationGiantswarmIoV1alpha1AppCatalogRequest {
    name: string;
    body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceApplicationGiantswarmIoV1alpha1NamespacedAppRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceApplicationGiantswarmIoV1alpha1NamespacedChartRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchApplicationGiantswarmIoV1alpha1AppCatalogRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchApplicationGiantswarmIoV1alpha1AppCatalogListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchApplicationGiantswarmIoV1alpha1AppListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchApplicationGiantswarmIoV1alpha1ChartListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchApplicationGiantswarmIoV1alpha1NamespacedAppRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchApplicationGiantswarmIoV1alpha1NamespacedAppListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchApplicationGiantswarmIoV1alpha1NamespacedChartRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchApplicationGiantswarmIoV1alpha1NamespacedChartListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class ApplicationGiantswarmIoV1alpha1Api extends runtime.BaseAPI {

    /**
     * create an AppCatalog
     */
    async createApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters: CreateApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplicationGiantswarmIoV1alpha1AppCatalog.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/appcatalogs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(jsonValue));
    }

    /**
     * create an AppCatalog
     */
    async createApplicationGiantswarmIoV1alpha1AppCatalog(requestParameters: CreateApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog> {
        const response = await this.createApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters);
        return await response.value();
    }

    /**
     * create an App
     */
    async createApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters: CreateApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(jsonValue));
    }

    /**
     * create an App
     */
    async createApplicationGiantswarmIoV1alpha1NamespacedApp(requestParameters: CreateApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App> {
        const response = await this.createApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a Chart
     */
    async createApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters: CreateApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(jsonValue));
    }

    /**
     * create a Chart
     */
    async createApplicationGiantswarmIoV1alpha1NamespacedChart(requestParameters: CreateApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart> {
        const response = await this.createApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AppCatalog
     */
    async deleteApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters: DeleteApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1AppCatalog.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/appcatalogs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AppCatalog
     */
    async deleteApplicationGiantswarmIoV1alpha1AppCatalog(requestParameters: DeleteApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AppCatalog
     */
    async deleteApplicationGiantswarmIoV1alpha1CollectionAppCatalogRaw(requestParameters: DeleteApplicationGiantswarmIoV1alpha1CollectionAppCatalogRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/appcatalogs`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AppCatalog
     */
    async deleteApplicationGiantswarmIoV1alpha1CollectionAppCatalog(requestParameters: DeleteApplicationGiantswarmIoV1alpha1CollectionAppCatalogRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteApplicationGiantswarmIoV1alpha1CollectionAppCatalogRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of App
     */
    async deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedAppRaw(requestParameters: DeleteApplicationGiantswarmIoV1alpha1CollectionNamespacedAppRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedApp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of App
     */
    async deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedApp(requestParameters: DeleteApplicationGiantswarmIoV1alpha1CollectionNamespacedAppRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Chart
     */
    async deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChartRaw(requestParameters: DeleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChartRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Chart
     */
    async deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChart(requestParameters: DeleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChartRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteApplicationGiantswarmIoV1alpha1CollectionNamespacedChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an App
     */
    async deleteApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters: DeleteApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an App
     */
    async deleteApplicationGiantswarmIoV1alpha1NamespacedApp(requestParameters: DeleteApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a Chart
     */
    async deleteApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters: DeleteApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Chart
     */
    async deleteApplicationGiantswarmIoV1alpha1NamespacedChart(requestParameters: DeleteApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getApplicationGiantswarmIoV1alpha1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getApplicationGiantswarmIoV1alpha1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getApplicationGiantswarmIoV1alpha1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind AppCatalog
     */
    async listApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters: ListApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/appcatalogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AppCatalog
     */
    async listApplicationGiantswarmIoV1alpha1AppCatalog(requestParameters: ListApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogList> {
        const response = await this.listApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind App
     */
    async listApplicationGiantswarmIoV1alpha1AppForAllNamespacesRaw(requestParameters: ListApplicationGiantswarmIoV1alpha1AppForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind App
     */
    async listApplicationGiantswarmIoV1alpha1AppForAllNamespaces(requestParameters: ListApplicationGiantswarmIoV1alpha1AppForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppList> {
        const response = await this.listApplicationGiantswarmIoV1alpha1AppForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Chart
     */
    async listApplicationGiantswarmIoV1alpha1ChartForAllNamespacesRaw(requestParameters: ListApplicationGiantswarmIoV1alpha1ChartForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/charts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Chart
     */
    async listApplicationGiantswarmIoV1alpha1ChartForAllNamespaces(requestParameters: ListApplicationGiantswarmIoV1alpha1ChartForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartList> {
        const response = await this.listApplicationGiantswarmIoV1alpha1ChartForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind App
     */
    async listApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters: ListApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind App
     */
    async listApplicationGiantswarmIoV1alpha1NamespacedApp(requestParameters: ListApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppList> {
        const response = await this.listApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Chart
     */
    async listApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters: ListApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Chart
     */
    async listApplicationGiantswarmIoV1alpha1NamespacedChart(requestParameters: ListApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartList> {
        const response = await this.listApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AppCatalog
     */
    async patchApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters: PatchApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchApplicationGiantswarmIoV1alpha1AppCatalog.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchApplicationGiantswarmIoV1alpha1AppCatalog.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/appcatalogs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(jsonValue));
    }

    /**
     * partially update the specified AppCatalog
     */
    async patchApplicationGiantswarmIoV1alpha1AppCatalog(requestParameters: PatchApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog> {
        const response = await this.patchApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified App
     */
    async patchApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters: PatchApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(jsonValue));
    }

    /**
     * partially update the specified App
     */
    async patchApplicationGiantswarmIoV1alpha1NamespacedApp(requestParameters: PatchApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App> {
        const response = await this.patchApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Chart
     */
    async patchApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters: PatchApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(jsonValue));
    }

    /**
     * partially update the specified Chart
     */
    async patchApplicationGiantswarmIoV1alpha1NamespacedChart(requestParameters: PatchApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart> {
        const response = await this.patchApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AppCatalog
     */
    async readApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters: ReadApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readApplicationGiantswarmIoV1alpha1AppCatalog.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/appcatalogs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(jsonValue));
    }

    /**
     * read the specified AppCatalog
     */
    async readApplicationGiantswarmIoV1alpha1AppCatalog(requestParameters: ReadApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog> {
        const response = await this.readApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified App
     */
    async readApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters: ReadApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(jsonValue));
    }

    /**
     * read the specified App
     */
    async readApplicationGiantswarmIoV1alpha1NamespacedApp(requestParameters: ReadApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App> {
        const response = await this.readApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Chart
     */
    async readApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters: ReadApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(jsonValue));
    }

    /**
     * read the specified Chart
     */
    async readApplicationGiantswarmIoV1alpha1NamespacedChart(requestParameters: ReadApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart> {
        const response = await this.readApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AppCatalog
     */
    async replaceApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters: ReplaceApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1AppCatalog.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1AppCatalog.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/appcatalogs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalogFromJSON(jsonValue));
    }

    /**
     * replace the specified AppCatalog
     */
    async replaceApplicationGiantswarmIoV1alpha1AppCatalog(requestParameters: ReplaceApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppCatalog> {
        const response = await this.replaceApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified App
     */
    async replaceApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters: ReplaceApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1AppFromJSON(jsonValue));
    }

    /**
     * replace the specified App
     */
    async replaceApplicationGiantswarmIoV1alpha1NamespacedApp(requestParameters: ReplaceApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1App> {
        const response = await this.replaceApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Chart
     */
    async replaceApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters: ReplaceApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/namespaces/{namespace}/charts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1ChartFromJSON(jsonValue));
    }

    /**
     * replace the specified Chart
     */
    async replaceApplicationGiantswarmIoV1alpha1NamespacedChart(requestParameters: ReplaceApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisApplicationV1alpha1Chart> {
        const response = await this.replaceApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AppCatalog. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters: WatchApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchApplicationGiantswarmIoV1alpha1AppCatalog.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/watch/appcatalogs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AppCatalog. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchApplicationGiantswarmIoV1alpha1AppCatalog(requestParameters: WatchApplicationGiantswarmIoV1alpha1AppCatalogRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApplicationGiantswarmIoV1alpha1AppCatalogRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AppCatalog. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1AppCatalogListRaw(requestParameters: WatchApplicationGiantswarmIoV1alpha1AppCatalogListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/watch/appcatalogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AppCatalog. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1AppCatalogList(requestParameters: WatchApplicationGiantswarmIoV1alpha1AppCatalogListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApplicationGiantswarmIoV1alpha1AppCatalogListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of App. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1AppListForAllNamespacesRaw(requestParameters: WatchApplicationGiantswarmIoV1alpha1AppListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/watch/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of App. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1AppListForAllNamespaces(requestParameters: WatchApplicationGiantswarmIoV1alpha1AppListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApplicationGiantswarmIoV1alpha1AppListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Chart. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1ChartListForAllNamespacesRaw(requestParameters: WatchApplicationGiantswarmIoV1alpha1ChartListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/watch/charts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Chart. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1ChartListForAllNamespaces(requestParameters: WatchApplicationGiantswarmIoV1alpha1ChartListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApplicationGiantswarmIoV1alpha1ChartListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind App. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters: WatchApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedApp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind App. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchApplicationGiantswarmIoV1alpha1NamespacedApp(requestParameters: WatchApplicationGiantswarmIoV1alpha1NamespacedAppRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApplicationGiantswarmIoV1alpha1NamespacedAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of App. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1NamespacedAppListRaw(requestParameters: WatchApplicationGiantswarmIoV1alpha1NamespacedAppListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedAppList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/apps`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of App. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1NamespacedAppList(requestParameters: WatchApplicationGiantswarmIoV1alpha1NamespacedAppListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApplicationGiantswarmIoV1alpha1NamespacedAppListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Chart. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters: WatchApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/charts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Chart. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchApplicationGiantswarmIoV1alpha1NamespacedChart(requestParameters: WatchApplicationGiantswarmIoV1alpha1NamespacedChartRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApplicationGiantswarmIoV1alpha1NamespacedChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Chart. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1NamespacedChartListRaw(requestParameters: WatchApplicationGiantswarmIoV1alpha1NamespacedChartListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchApplicationGiantswarmIoV1alpha1NamespacedChartList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/application.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/charts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Chart. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApplicationGiantswarmIoV1alpha1NamespacedChartList(requestParameters: WatchApplicationGiantswarmIoV1alpha1NamespacedChartListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApplicationGiantswarmIoV1alpha1NamespacedChartListRaw(requestParameters);
        return await response.value();
    }

}
