/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup,
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupToJSON,
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupList,
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateBackupGiantswarmIoV1alpha1ETCDBackupRequest {
    body: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteBackupGiantswarmIoV1alpha1CollectionETCDBackupRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteBackupGiantswarmIoV1alpha1ETCDBackupRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListBackupGiantswarmIoV1alpha1ETCDBackupRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchBackupGiantswarmIoV1alpha1ETCDBackupRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadBackupGiantswarmIoV1alpha1ETCDBackupRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceBackupGiantswarmIoV1alpha1ETCDBackupRequest {
    name: string;
    body: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchBackupGiantswarmIoV1alpha1ETCDBackupRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchBackupGiantswarmIoV1alpha1ETCDBackupListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class BackupGiantswarmIoV1alpha1Api extends runtime.BaseAPI {

    /**
     * create an ETCDBackup
     */
    async createBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters: CreateBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createBackupGiantswarmIoV1alpha1ETCDBackup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/etcdbackups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(jsonValue));
    }

    /**
     * create an ETCDBackup
     */
    async createBackupGiantswarmIoV1alpha1ETCDBackup(requestParameters: CreateBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup> {
        const response = await this.createBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ETCDBackup
     */
    async deleteBackupGiantswarmIoV1alpha1CollectionETCDBackupRaw(requestParameters: DeleteBackupGiantswarmIoV1alpha1CollectionETCDBackupRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/etcdbackups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ETCDBackup
     */
    async deleteBackupGiantswarmIoV1alpha1CollectionETCDBackup(requestParameters: DeleteBackupGiantswarmIoV1alpha1CollectionETCDBackupRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteBackupGiantswarmIoV1alpha1CollectionETCDBackupRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an ETCDBackup
     */
    async deleteBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters: DeleteBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteBackupGiantswarmIoV1alpha1ETCDBackup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/etcdbackups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an ETCDBackup
     */
    async deleteBackupGiantswarmIoV1alpha1ETCDBackup(requestParameters: DeleteBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getBackupGiantswarmIoV1alpha1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getBackupGiantswarmIoV1alpha1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getBackupGiantswarmIoV1alpha1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind ETCDBackup
     */
    async listBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters: ListBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/etcdbackups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ETCDBackup
     */
    async listBackupGiantswarmIoV1alpha1ETCDBackup(requestParameters: ListBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupList> {
        const response = await this.listBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ETCDBackup
     */
    async patchBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters: PatchBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchBackupGiantswarmIoV1alpha1ETCDBackup.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchBackupGiantswarmIoV1alpha1ETCDBackup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/etcdbackups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(jsonValue));
    }

    /**
     * partially update the specified ETCDBackup
     */
    async patchBackupGiantswarmIoV1alpha1ETCDBackup(requestParameters: PatchBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup> {
        const response = await this.patchBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ETCDBackup
     */
    async readBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters: ReadBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readBackupGiantswarmIoV1alpha1ETCDBackup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/etcdbackups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(jsonValue));
    }

    /**
     * read the specified ETCDBackup
     */
    async readBackupGiantswarmIoV1alpha1ETCDBackup(requestParameters: ReadBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup> {
        const response = await this.readBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ETCDBackup
     */
    async replaceBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters: ReplaceBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceBackupGiantswarmIoV1alpha1ETCDBackup.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceBackupGiantswarmIoV1alpha1ETCDBackup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/etcdbackups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackupFromJSON(jsonValue));
    }

    /**
     * replace the specified ETCDBackup
     */
    async replaceBackupGiantswarmIoV1alpha1ETCDBackup(requestParameters: ReplaceBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisBackupV1alpha1ETCDBackup> {
        const response = await this.replaceBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ETCDBackup. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters: WatchBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchBackupGiantswarmIoV1alpha1ETCDBackup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/watch/etcdbackups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ETCDBackup. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchBackupGiantswarmIoV1alpha1ETCDBackup(requestParameters: WatchBackupGiantswarmIoV1alpha1ETCDBackupRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchBackupGiantswarmIoV1alpha1ETCDBackupRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ETCDBackup. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchBackupGiantswarmIoV1alpha1ETCDBackupListRaw(requestParameters: WatchBackupGiantswarmIoV1alpha1ETCDBackupListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/backup.giantswarm.io/v1alpha1/watch/etcdbackups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ETCDBackup. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchBackupGiantswarmIoV1alpha1ETCDBackupList(requestParameters: WatchBackupGiantswarmIoV1alpha1ETCDBackupListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchBackupGiantswarmIoV1alpha1ETCDBackupListRaw(requestParameters);
        return await response.value();
    }

}
