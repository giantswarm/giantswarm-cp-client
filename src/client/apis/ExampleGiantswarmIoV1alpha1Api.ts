/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfig,
    ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
} from '../models';

export interface ReadExampleGiantswarmIoV1alpha1NamespacedMemcachedConfigRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

/**
 * 
 */
export class ExampleGiantswarmIoV1alpha1Api extends runtime.BaseAPI {

    /**
     * get available resources
     */
    async getExampleGiantswarmIoV1alpha1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/example.giantswarm.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getExampleGiantswarmIoV1alpha1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getExampleGiantswarmIoV1alpha1APIResourcesRaw();
        return await response.value();
    }

    /**
     * read the specified MemcachedConfig
     */
    async readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfigRaw(requestParameters: ReadExampleGiantswarmIoV1alpha1NamespacedMemcachedConfigRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfig>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfig.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/example.giantswarm.io/v1alpha1/namespaces/{namespace}/memcachedconfigs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfigFromJSON(jsonValue));
    }

    /**
     * read the specified MemcachedConfig
     */
    async readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfig(requestParameters: ReadExampleGiantswarmIoV1alpha1NamespacedMemcachedConfigRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisExampleV1alpha1MemcachedConfig> {
        const response = await this.readExampleGiantswarmIoV1alpha1NamespacedMemcachedConfigRaw(requestParameters);
        return await response.value();
    }

}
