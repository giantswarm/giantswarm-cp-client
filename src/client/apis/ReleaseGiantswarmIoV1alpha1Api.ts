/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release,
    ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseToJSON,
    ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseList,
    ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateReleaseGiantswarmIoV1alpha1ReleaseRequest {
    body: ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteReleaseGiantswarmIoV1alpha1CollectionReleaseRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteReleaseGiantswarmIoV1alpha1ReleaseRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListReleaseGiantswarmIoV1alpha1ReleaseRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchReleaseGiantswarmIoV1alpha1ReleaseRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadReleaseGiantswarmIoV1alpha1ReleaseRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceReleaseGiantswarmIoV1alpha1ReleaseRequest {
    name: string;
    body: ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchReleaseGiantswarmIoV1alpha1ReleaseRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchReleaseGiantswarmIoV1alpha1ReleaseListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class ReleaseGiantswarmIoV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a Release
     */
    async createReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters: CreateReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createReleaseGiantswarmIoV1alpha1Release.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/releases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(jsonValue));
    }

    /**
     * create a Release
     */
    async createReleaseGiantswarmIoV1alpha1Release(requestParameters: CreateReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release> {
        const response = await this.createReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Release
     */
    async deleteReleaseGiantswarmIoV1alpha1CollectionReleaseRaw(requestParameters: DeleteReleaseGiantswarmIoV1alpha1CollectionReleaseRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/releases`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Release
     */
    async deleteReleaseGiantswarmIoV1alpha1CollectionRelease(requestParameters: DeleteReleaseGiantswarmIoV1alpha1CollectionReleaseRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteReleaseGiantswarmIoV1alpha1CollectionReleaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a Release
     */
    async deleteReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters: DeleteReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteReleaseGiantswarmIoV1alpha1Release.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/releases/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Release
     */
    async deleteReleaseGiantswarmIoV1alpha1Release(requestParameters: DeleteReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getReleaseGiantswarmIoV1alpha1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getReleaseGiantswarmIoV1alpha1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getReleaseGiantswarmIoV1alpha1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind Release
     */
    async listReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters: ListReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/releases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Release
     */
    async listReleaseGiantswarmIoV1alpha1Release(requestParameters: ListReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseList> {
        const response = await this.listReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Release
     */
    async patchReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters: PatchReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchReleaseGiantswarmIoV1alpha1Release.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchReleaseGiantswarmIoV1alpha1Release.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/releases/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(jsonValue));
    }

    /**
     * partially update the specified Release
     */
    async patchReleaseGiantswarmIoV1alpha1Release(requestParameters: PatchReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release> {
        const response = await this.patchReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Release
     */
    async readReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters: ReadReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readReleaseGiantswarmIoV1alpha1Release.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/releases/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(jsonValue));
    }

    /**
     * read the specified Release
     */
    async readReleaseGiantswarmIoV1alpha1Release(requestParameters: ReadReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release> {
        const response = await this.readReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Release
     */
    async replaceReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters: ReplaceReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceReleaseGiantswarmIoV1alpha1Release.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceReleaseGiantswarmIoV1alpha1Release.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/releases/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1ReleaseFromJSON(jsonValue));
    }

    /**
     * replace the specified Release
     */
    async replaceReleaseGiantswarmIoV1alpha1Release(requestParameters: ReplaceReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisReleaseV1alpha1Release> {
        const response = await this.replaceReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Release. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters: WatchReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchReleaseGiantswarmIoV1alpha1Release.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/watch/releases/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Release. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchReleaseGiantswarmIoV1alpha1Release(requestParameters: WatchReleaseGiantswarmIoV1alpha1ReleaseRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchReleaseGiantswarmIoV1alpha1ReleaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Release. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchReleaseGiantswarmIoV1alpha1ReleaseListRaw(requestParameters: WatchReleaseGiantswarmIoV1alpha1ReleaseListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/release.giantswarm.io/v1alpha1/watch/releases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Release. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchReleaseGiantswarmIoV1alpha1ReleaseList(requestParameters: WatchReleaseGiantswarmIoV1alpha1ReleaseListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchReleaseGiantswarmIoV1alpha1ReleaseListRaw(requestParameters);
        return await response.value();
    }

}
