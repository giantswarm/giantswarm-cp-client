/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool,
    ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolToJSON,
    ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolList,
    ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest {
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureToolRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListToolingGiantswarmIoV1alpha1AzureToolForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest {
    name: string;
    namespace: string;
    body: ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchToolingGiantswarmIoV1alpha1NamespacedAzureToolListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class ToolingGiantswarmIoV1alpha1Api extends runtime.BaseAPI {

    /**
     * create an AzureTool
     */
    async createToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters: CreateToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(jsonValue));
    }

    /**
     * create an AzureTool
     */
    async createToolingGiantswarmIoV1alpha1NamespacedAzureTool(requestParameters: CreateToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool> {
        const response = await this.createToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of AzureTool
     */
    async deleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureToolRaw(requestParameters: DeleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureToolRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of AzureTool
     */
    async deleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureTool(requestParameters: DeleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureToolRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteToolingGiantswarmIoV1alpha1CollectionNamespacedAzureToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an AzureTool
     */
    async deleteToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters: DeleteToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an AzureTool
     */
    async deleteToolingGiantswarmIoV1alpha1NamespacedAzureTool(requestParameters: DeleteToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getToolingGiantswarmIoV1alpha1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getToolingGiantswarmIoV1alpha1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getToolingGiantswarmIoV1alpha1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind AzureTool
     */
    async listToolingGiantswarmIoV1alpha1AzureToolForAllNamespacesRaw(requestParameters: ListToolingGiantswarmIoV1alpha1AzureToolForAllNamespacesRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/azuretools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AzureTool
     */
    async listToolingGiantswarmIoV1alpha1AzureToolForAllNamespaces(requestParameters: ListToolingGiantswarmIoV1alpha1AzureToolForAllNamespacesRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolList> {
        const response = await this.listToolingGiantswarmIoV1alpha1AzureToolForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind AzureTool
     */
    async listToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters: ListToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind AzureTool
     */
    async listToolingGiantswarmIoV1alpha1NamespacedAzureTool(requestParameters: ListToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolList> {
        const response = await this.listToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified AzureTool
     */
    async patchToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters: PatchToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(jsonValue));
    }

    /**
     * partially update the specified AzureTool
     */
    async patchToolingGiantswarmIoV1alpha1NamespacedAzureTool(requestParameters: PatchToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool> {
        const response = await this.patchToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified AzureTool
     */
    async readToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters: ReadToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(jsonValue));
    }

    /**
     * read the specified AzureTool
     */
    async readToolingGiantswarmIoV1alpha1NamespacedAzureTool(requestParameters: ReadToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool> {
        const response = await this.readToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified AzureTool
     */
    async replaceToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters: ReplaceToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<runtime.ApiResponse<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/namespaces/{namespace}/azuretools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureToolFromJSON(jsonValue));
    }

    /**
     * replace the specified AzureTool
     */
    async replaceToolingGiantswarmIoV1alpha1NamespacedAzureTool(requestParameters: ReplaceToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<ComGithubGiantswarmApiextensionsPkgApisToolingV1alpha1AzureTool> {
        const response = await this.replaceToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AzureTool. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespacesRaw(requestParameters: WatchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/watch/azuretools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AzureTool. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespaces(requestParameters: WatchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchToolingGiantswarmIoV1alpha1AzureToolListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind AzureTool. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters: WatchToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchToolingGiantswarmIoV1alpha1NamespacedAzureTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azuretools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind AzureTool. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchToolingGiantswarmIoV1alpha1NamespacedAzureTool(requestParameters: WatchToolingGiantswarmIoV1alpha1NamespacedAzureToolRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchToolingGiantswarmIoV1alpha1NamespacedAzureToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of AzureTool. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchToolingGiantswarmIoV1alpha1NamespacedAzureToolListRaw(requestParameters: WatchToolingGiantswarmIoV1alpha1NamespacedAzureToolListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchToolingGiantswarmIoV1alpha1NamespacedAzureToolList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apis/tooling.giantswarm.io/v1alpha1/watch/namespaces/{namespace}/azuretools`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of AzureTool. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchToolingGiantswarmIoV1alpha1NamespacedAzureToolList(requestParameters: WatchToolingGiantswarmIoV1alpha1NamespacedAzureToolListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchToolingGiantswarmIoV1alpha1NamespacedAzureToolListRaw(requestParameters);
        return await response.value();
    }

}
