/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecret,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMaster,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorker,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundle,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleToJSON,
} from './';

/**
 * 
 * @export
 * @interface ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
 */
export interface ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest {
    /**
     * 
     * @type {number}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    availabilityZones?: number;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecret}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    credentialSecret: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecret;
    /**
     * DNSZone for guest cluster is supplemented with host prefixes for specific services such as Kubernetes API or Etcd. In general this DNS Zone should start with "k8s" like for example "k8s.cluster.example.com.".
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    dnsZone: string;
    /**
     * 
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    id: string;
    /**
     * 
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMaster>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    masters?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMaster>;
    /**
     * 
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    releaseVersion?: string;
    /**
     * 
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundle>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    versionBundles?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundle>;
    /**
     * 
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorker>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest
     */
    workers?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorker>;
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSON(json: any): ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSONTyped(json, false);
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'availabilityZones': !exists(json, 'availabilityZones') ? undefined : json['availabilityZones'],
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretFromJSON(json['credentialSecret']),
        'dnsZone': json['dnsZone'],
        'id': json['id'],
        'masters': !exists(json, 'masters') ? undefined : ((json['masters'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'releaseVersion': !exists(json, 'releaseVersion') ? undefined : json['releaseVersion'],
        'versionBundles': !exists(json, 'versionBundles') ? undefined : ((json['versionBundles'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleFromJSON)),
        'workers': !exists(json, 'workers') ? undefined : ((json['workers'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerFromJSON)),
    };
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestToJSON(value?: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'availabilityZones': value.availabilityZones,
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestCredentialSecretToJSON(value.credentialSecret),
        'dnsZone': value.dnsZone,
        'id': value.id,
        'masters': value.masters === undefined ? undefined : ((value.masters as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestMasterToJSON)),
        'name': value.name,
        'owner': value.owner,
        'releaseVersion': value.releaseVersion,
        'versionBundles': value.versionBundles === undefined ? undefined : ((value.versionBundles as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1ClusterGuestConfigVersionBundleToJSON)),
        'workers': value.workers === undefined ? undefined : ((value.workers as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1AWSClusterConfigSpecGuestWorkerToJSON)),
    };
}


