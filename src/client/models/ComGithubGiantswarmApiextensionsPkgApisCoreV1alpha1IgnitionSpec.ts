/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalico,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDocker,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcd,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngress,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetes,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistry,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSO,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOToJSON,
} from './';

/**
 * IgnitionSpec is the interface which defines the input parameters for a newly rendered g8s ignition template.
 * @export
 * @interface ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
 */
export interface ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec {
    /**
     * APIServerEncryptionKey is used in EncryptionConfiguration to encrypt Kubernetes secrets at rest.
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    apiServerEncryptionKey: string;
    /**
     * BaseDomain is the base domain for all cluster services. For test installations, this may be in the form <clusterId>.k8s.<installation>.<region>.<provider>.gigantic.io.
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    baseDomain: string;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalico}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    calico: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalico;
    /**
     * ClusterID is the name of the tenant cluster to be created.
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    clusterID: string;
    /**
     * DisableEncryptionAtRest will disable secret encryption at rest when set to true.
     * @type {boolean}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    disableEncryptionAtRest: boolean;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDocker}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    docker: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDocker;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcd}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    etcd: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcd;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    extension: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngress}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    ingress: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngress;
    /**
     * IsMaster determines if the rendered ignition should contain master-specific configuration.
     * @type {boolean}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    isMaster: boolean;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetes}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    kubernetes: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetes;
    /**
     * Defines the provider which should be rendered.
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    provider: string;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistry}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    registry: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistry;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSO}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec
     */
    sso: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSO;
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSON(json: any): ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSONTyped(json, false);
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'apiServerEncryptionKey': json['apiServerEncryptionKey'],
        'baseDomain': json['baseDomain'],
        'calico': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoFromJSON(json['calico']),
        'clusterID': json['clusterID'],
        'disableEncryptionAtRest': json['disableEncryptionAtRest'],
        'docker': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerFromJSON(json['docker']),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdFromJSON(json['etcd']),
        'extension': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSON(json['extension']),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressFromJSON(json['ingress']),
        'isMaster': json['isMaster'],
        'kubernetes': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesFromJSON(json['kubernetes']),
        'provider': json['provider'],
        'registry': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryFromJSON(json['registry']),
        'sso': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOFromJSON(json['sso']),
    };
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecToJSON(value?: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'apiServerEncryptionKey': value.apiServerEncryptionKey,
        'baseDomain': value.baseDomain,
        'calico': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecCalicoToJSON(value.calico),
        'clusterID': value.clusterID,
        'disableEncryptionAtRest': value.disableEncryptionAtRest,
        'docker': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecDockerToJSON(value.docker),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecEtcdToJSON(value.etcd),
        'extension': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionToJSON(value.extension),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecIngressToJSON(value.ingress),
        'isMaster': value.isMaster,
        'kubernetes': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecKubernetesToJSON(value.kubernetes),
        'provider': value.provider,
        'registry': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecRegistryToJSON(value.registry),
        'sso': ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecSSOToJSON(value.sso),
    };
}


