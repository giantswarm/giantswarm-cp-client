/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFile,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnit,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitToJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUser,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserToJSON,
} from './';

/**
 * 
 * @export
 * @interface ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension
 */
export interface ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension {
    /**
     * Files is an optional array of files which will be rendered and added to the final node ignition.
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFile>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension
     */
    files?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFile>;
    /**
     * Files is an optional array of systemd units which will be rendered and added to the final node ignition.
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnit>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension
     */
    units?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnit>;
    /**
     * Files is an optional array of users which will be added to the final node ignition.
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUser>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension
     */
    users?: Array<ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUser>;
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSON(json: any): ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension {
    return ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSONTyped(json, false);
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'files': !exists(json, 'files') ? undefined : ((json['files'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileFromJSON)),
        'units': !exists(json, 'units') ? undefined : ((json['units'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitFromJSON)),
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserFromJSON)),
    };
}

export function ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionToJSON(value?: ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtension | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'files': value.files === undefined ? undefined : ((value.files as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionFileToJSON)),
        'units': value.units === undefined ? undefined : ((value.units as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUnitToJSON)),
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisCoreV1alpha1IgnitionSpecExtensionUserToJSON)),
    };
}


