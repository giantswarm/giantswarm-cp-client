/* tslint:disable */
/* eslint-disable */
/**
 * giantswarm-cp-client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPI,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcd,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZones,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngress,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNode,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPC,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCToJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecret,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSON,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSONTyped,
    ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretToJSON,
} from './';

/**
 * 
 * @export
 * @interface ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
 */
export interface ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS {
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPI}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    api: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPI;
    /**
     * AvailabilityZones is the number of AWS availability zones used to spread the tenant cluster's worker nodes across. There are limitations on availability zone settings due to binary IP range splitting and provider specific region capabilities. When for instance choosing 3 availability zones, the configured IP range will be split into 4 ranges and thus one of it will not be able to be utilized. Such limitations have to be considered when designing the network topology and configuring tenant cluster HA via AvailabilityZones.
     * 
     * The selection and usage of the actual availability zones for the created tenant cluster is randomized. In case there are 4 availability zones provided in the used region and the user selects 2 availability zones, the actually used availability zones in which tenant cluster workload is put into will tend to be different across tenant cluster creations. This is done in order to provide more HA during single availability zone failures. In case a specific availability zone fails, not all tenant clusters will be affected due to the described selection process.
     * @type {number}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    availabilityZones: number;
    /**
     * 
     * 
     *     https://github.com/giantswarm/giantswarm/issues/4507
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    az: string;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecret}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    credentialSecret: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecret;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcd}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    etcd: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcd;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZones}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    hostedZones: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZones;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngress}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    ingress: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngress;
    /**
     * 
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNode>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    masters: Array<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNode>;
    /**
     * 
     * @type {string}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    region: string;
    /**
     * 
     * @type {ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPC}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    vpc: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPC;
    /**
     * 
     * @type {Array<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNode>}
     * @memberof ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS
     */
    workers: Array<ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNode>;
}

export function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSON(json: any): ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS {
    return ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSONTyped(json, false);
}

export function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIFromJSON(json['api']),
        'availabilityZones': json['availabilityZones'],
        'az': json['az'],
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretFromJSON(json['credentialSecret']),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdFromJSON(json['etcd']),
        'hostedZones': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesFromJSON(json['hostedZones']),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressFromJSON(json['ingress']),
        'masters': ((json['masters'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSON)),
        'region': json['region'],
        'vpc': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCFromJSON(json['vpc']),
        'workers': ((json['workers'] as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeFromJSON)),
    };
}

export function ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSToJSON(value?: ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWS | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'api': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSAPIToJSON(value.api),
        'availabilityZones': value.availabilityZones,
        'az': value.az,
        'credentialSecret': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1CredentialSecretToJSON(value.credentialSecret),
        'etcd': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSEtcdToJSON(value.etcd),
        'hostedZones': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSHostedZonesToJSON(value.hostedZones),
        'ingress': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSIngressToJSON(value.ingress),
        'masters': ((value.masters as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeToJSON)),
        'region': value.region,
        'vpc': ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSVPCToJSON(value.vpc),
        'workers': ((value.workers as Array<any>).map(ComGithubGiantswarmApiextensionsPkgApisProviderV1alpha1AWSConfigSpecAWSNodeToJSON)),
    };
}


